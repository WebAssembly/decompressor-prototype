/* -*- C++ -*- */
/*
 * Copyright 2016 WebAssembly Community Group participants
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%skeleton "lalr1.cc"

/* Textual parser for filter s-expressions */

%defines
%define api.namespace {wasm::filt}
%define parser_class_name {Parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires {
#include "sexp/Ast.h"
#include "stream/WriteUtils.h"
#include <string>

namespace wasm {
namespace filt {
class Driver;
class Node;

struct IntegerValue {
  wasm::decode::IntType Value;
  wasm::decode::ValueFormat Format;
};

}}

#ifdef __clang__
// TODO: Limit the reach of these pragma's?
#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wundefined-inline"
#endif // __clang__
}

// The parsing context.
%param { class Driver& Driver }

%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &Driver.getFilename();
};

%define parse.trace
%define parse.error verbose

%code
{
// Note: Must follow definitions above, so that location_type is declared.
# include "Driver.h"

}

// Special tokens
%token END 0 "$END"

// Keywords
%token BLOCK         "block"
%token BLOCKEND      "block.end"
%token BYTE_TO_BYTE  "byte.to.byte"
%token CASE          "case"
%token CLOSEPAREN    ")"
%token DEFAULT       "default"
%token DEFINE        "define"
%token ERROR         "error"
%token EVAL          "eval"
%token EVAL_DEFAULT  "eval.default"
%token FILTER        "filter"
%token I32_CONST     "i32.const"
%token I64_CONST     "i64.const"
%token LIT           "lit"
%token LOOP          "loop"
%token LOOP_UNBOUNDED "loop.unbounded"
%token OPENPAREN     "("
%token MAP           "map"
%token PEEK          "peek"
%token READ          "read"
%token SECTION       "section"
%token SELECT        "select"
%token SEQ           "seq"
%token SYM_CONST     "sym.const"
%token UINT8         "uint8"
%token UINT32        "uint32"
%token UINT64        "uint64"
%token UNDEFINE      "undefine"
%token U32_CONST     "u32.const"
%token U64_CONST     "u64.const"
%token VARINT32      "varint32"
%token VARINT64      "varint64"
%token VARUINT32     "varuint32"
%token VARUINT64     "varuint64"
%token VERSION       "version"
%token VOID          "void"

// Terminal classes
%token <wasm::filt::ExternalName> IDENTIFIER
%token <wasm::filt::IntegerValue> INTEGER

// Nonterminal classes.
%type <wasm::filt::Node *> block_stmt_list
%type <wasm::filt::Node *> case
%type <wasm::filt::SelectNode *> case_list
%type <wasm::filt::Node *> case_stmt_list
%type <wasm::filt::Node *> declaration
%type <wasm::filt::Node *> declaration_list
%type <wasm::filt::Node *> declaration_stmt_list
%type <wasm::filt::Node *> expression
%type <wasm::filt::Node *> file
%type <wasm::filt::IntegerNode *> integer
%type <wasm::filt::Node *> stream_conv
%type <wasm::filt::Node *> stream_conv_list
%type <wasm::filt::Node *> stream_conv_stmt_list
%type <wasm::filt::Node *> header
%type <wasm::filt::Node *> loop_body
%type <wasm::filt::Node *> section
%type <wasm::filt::Node *> section_list
%type <wasm::filt::Node *> seq_stmt_list
%type <wasm::filt::Node *> statement
%type <wasm::filt::Node *> symbol

%start file

%%

file    : section_list {
            $$ = $1;
            Driver.setParsedAst($1);
          }
        ;

case    : "(" "case" case_stmt_list ")" { $$ = $3; }
        ;

case_list
        : expression statement { // selector / default statement.
            $$ = Driver.create<SelectNode>();
            $$->append($1);
            $$->append($2);
          }
        | case_list case {
            $$ = $1;
            $$->append($2);
          }
        ;

case_stmt_list
        : integer statement { // case index / first statement of case.
            $$ = Driver.create<CaseNode>($1, $2);
          }
        | case_stmt_list statement { // remaining statements of case.
            $$ = $1;
            Node *StmtList = $1->getKid(1);
            auto *Seq = dyn_cast<SequenceNode>(StmtList);
            if (Seq == nullptr) {
              Seq = Driver.create<SequenceNode>();
              Seq->append(StmtList);
              $1->setKid(1, Seq);
            }
            Seq->append($2);
          }
        ;

declaration
        : "(" declaration_stmt_list ")" {
            $$ = $2;
          }
        | "(" "undefine" symbol ")" {
            $$ = Driver.create<UndefineNode>($3);
          }
        ;

declaration_stmt_list
        : "default" symbol statement {
            $$ = Driver.create<DefaultNode>($2, $3);
          }
        | "define" symbol statement {
            $$ = Driver.create<DefineNode>($2, $3);
          }
        | declaration_stmt_list statement {
            $$ = $1;
            Node *StmtList = $1->getKid(1);
            auto *Seq = dyn_cast<SequenceNode>(StmtList);
            if (Seq == nullptr) {
              Seq = Driver.create<SequenceNode>();
              Seq->append(StmtList);
              $1->setKid(1, Seq);
            }
            Seq->append($2);
          }
        ;

declaration_list
        : symbol declaration {  // Section name / first define.
            $$ = Driver.create<SectionNode>();
            $$->append($1);
            $$->append($2);
          }
          | declaration_list declaration { // Additional defines.
            $$ = $1;
            $$->append($2);
          }
        ;

block_stmt_list
        : "block" expression statement  {
            $$ = Driver.create<BlockNode>($2, $3);
          }
        | block_stmt_list statement {
            $$ = $1;
            Node *StmtList = $1->getKid(1);
            auto *Seq = dyn_cast<SequenceNode>(StmtList);
            if (Seq == nullptr) {
              Seq = Driver.create<SequenceNode>();
              Seq->append(StmtList);
              $1->setKid(1, Seq);
            }
            Seq->append($2);
          }
        ;

expression
        : "(" "block.end" ")" {
            $$ = Driver.create<BlockEndNoArgsNode>();
          }
        | "(" "error" ")" {
            $$ = Driver.create<ErrorNode>();
          }
        | "(" "eval" symbol ")" {
            $$ = Driver.create<EvalNode>($3);
          }
        | "(" "eval.default" symbol ")" {
            $$ = Driver.create<EvalDefaultNode>($3);
          }
        | "(" "i32.const" integer ")" {
            $$ = Driver.create<I32ConstNode>($3);
          }
        | "(" "i64.const" integer ")" {
            $$ = Driver.create<I64ConstNode>($3);
          }
        | "(" "lit" integer ")" {
            $$ = Driver.create<LitNode>($3);
          }
        | "(" "map" expression expression ")" {
            $$ = Driver.create<MapNode>($3, $4);
          }
        | "(" "peek" expression ")" {
            $$ = Driver.create<PeekNode>($3);
          }
        | "(" "read" expression ")" {
            $$ = Driver.create<ReadNode>($3);
          }
        | "(" "sym.const" symbol ")" {
            $$ = Driver.create<SymConstNode>($3);
          }
        | "(" "uint8" ")" {
            $$ = Driver.create<Uint8NoArgsNode>();
          }
        | "(" "uint8" integer ")" {
            if ($3->getValue() > 8)
              Driver.error("uint8 bitsize > 8");
            $$ = Driver.create<Uint8OneArgNode>($3);
          }
        | "(" "uint32" ")" {
            $$ = Driver.create<Uint32NoArgsNode>();
          }
        | "(" "uint32" integer ")"  {
            if ($3->getValue() > 32)
              Driver.error("uint32 bitsize > 32");
            $$ = Driver.create<Uint32OneArgNode>($3);
          }
        | "(" "uint64" ")" {
            $$ = Driver.create<Uint64NoArgsNode>();
          }
        | "(" "uint64" integer ")"  {
            if ($3->getValue() > 64)
              Driver.error("uint64 bitsize > 64");
            $$ = Driver.create<Uint64OneArgNode>($3);
          }
        | "(" "u32.const" integer ")" {
            $$ = Driver.create<U32ConstNode>($3);
          }
        | "(" "u64.const" integer ")" {
            $$ = Driver.create<U64ConstNode>($3);
          }
        | "(" "varint32" ")" {
            $$ = Driver.create<Varint32NoArgsNode>();
          }
        | "(" "varint32" integer ")" {
            decode::IntType Bitsize = $3->getValue();
            if (Bitsize < 2 || Bitsize > 32)
              Driver.error("varint32 expects 2 <= bitsize <= 32");
            $$ = Driver.create<Varint32OneArgNode>($3);
          }
        | "(" "varint64" ")" {
            $$ = Driver.create<Varint64NoArgsNode>();
          }
        | "(" "varint64" integer ")" {
            decode::IntType Bitsize = $3->getValue();
            if (Bitsize < 2 || Bitsize > 64)
              Driver.error("varint64 expects 2 <= bitsize <= 64");
            $$ = Driver.create<Varint64OneArgNode>($3);
          }
        | "(" "varuint32" ")" {
            $$ = Driver.create<Varuint32NoArgsNode>();
          }
        | "(" "varuint32" integer ")" {
            decode::IntType Bitsize = $3->getValue();
            if (Bitsize < 2 || Bitsize > 32)
              Driver.error("varuint32 expects 2 <= bitsize <= 32");
            $$ = Driver.create<Varuint32OneArgNode>($3);
          }
        | "(" "varuint64" ")" {
            $$ = Driver.create<Varuint64NoArgsNode>();
          }
        | "(" "varuint64" integer ")" {
            decode::IntType Bitsize = $3->getValue();
            if (Bitsize < 2 || Bitsize > 64)
              Driver.error("varuint64 expects 2 <= bitsize <= 64");
            $$ = Driver.create<Varuint64OneArgNode>($3);
          }
        | "(" "void" ")" {
            $$ = Driver.create<VoidNode>();
          }
        ;

header  : "(" "version" integer ")" {
            if ($3->getValue() != 0)
              Driver.error("Currently, only (version 0) is supported");
            $$ = Driver.create<VersionNode>($3);
          }
        ;

integer : INTEGER {
           $$ = Driver.create<IntegerNode>($1.Value, $1.Format);
          }

loop_body
        : "loop" expression {
           $$ = Driver.create<LoopNode>();
            $$->append($2);
          }
        | "loop.unbounded" {
            $$ = Driver.create<LoopUnboundedNode>();
          }
        | loop_body statement {
            $$ = $1;
            $$->append($2);
          }
        ;

section : "(" "section" declaration_list ")" { $$ = $3; }
        ;

section_list
        : header section { // Header / first section of file.
            $$ = Driver.create<FileNode>();
            $$->append($1);
            $$->append($2);
          }
        | section_list section { // Remaining sections in file.
            $$ = $1;
            $$->append($2);
          }
        ;

seq_stmt_list
        : %empty {
            $$ = Driver.create<SequenceNode>();
          }
        | seq_stmt_list statement {
            $$ = $1;
            $$->append($2);
          }
        ;

statement
        : expression { $$ = $1; }
        | stream_conv { $$ = $1; }
        | "(" block_stmt_list ")"  { $$ = $2; }
        | "(" "block.end" statement ")" {
            $$ = Driver.create<BlockEndOneArgNode>($3);
          }
        | "(" "filter" stream_conv_list ")" { $$ = $3; }
        | "(" loop_body ")" { $$ = $2; }
        | "(" "select" case_list ")" {
            $$ = $3;
            $3->installFastLookup();
          }
        | "(" "seq" seq_stmt_list ")" { $$ = $3; }
        ;

stream_conv  : "(" stream_conv_stmt_list ")" {
            $$ = $2;
          }
        ;

stream_conv_list
        : stream_conv {
            $$ = Driver.create<FilterNode>();
            $$->append($1);
          }
        | stream_conv_list stream_conv {
            $$ = $1;
            $$->append($2);
          }
        ;

stream_conv_stmt_list
       : "byte.to.byte" statement {
            $$ = Driver.create<ByteToByteNode>($2);
          }
        | stream_conv_stmt_list statement {
            $$ = $1;
            Node *StmtList = $1->getKid(0);
            auto *Seq = dyn_cast<SequenceNode>(StmtList);
            if (Seq == nullptr) {
              Seq = Driver.create<SequenceNode>();
              Seq->append(StmtList);
              $1->setKid(0, Seq);
            }
            Seq->append($2);
          }
        ;

symbol  : IDENTIFIER { $$ = Driver.getSymbolDefinition($1); }
        ;

%%

void wasm::filt::Parser::error(const location_type& L, const std::string& M) {
  Driver.error(L, M);
}

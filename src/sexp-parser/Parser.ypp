/* -*- C++ -*- */
/*
 * Copyright 2016 WebAssembly Community Group participants
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%skeleton "lalr1.cc"

/* Textual parser for filter s-expressions */

%defines
%define api.namespace {wasm::filt}
%define parser_class_name {Parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires {
#include <string>

#include "sexp/Ast.h"
#include "stream/WriteUtils.h"
#include "utils/Casting.h"

namespace wasm {
namespace filt {
class Driver;
class Node;

struct IntValue {
  wasm::decode::IntType Value;
  wasm::decode::ValueFormat Format;
};

}}

#ifdef __clang__
// TODO: Limit the reach of these pragma's?
#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wundefined-inline"
#endif // __clang__
}

// The parsing context.
%param { class Driver& Driver }

%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &Driver.getFilename();
};

%define parse.trace
%define parse.error verbose

%code
{
// Note: Must follow definitions above, so that location_type is declared.
# include "sexp-parser/Driver.h"

}

// Special tokens
%token END 0 "$END"

// Keywords
%token ACCEPT        "accept"
%token ACTION        "action"
%token AND           "and"
%token BINARY        "binary"
%token BIT           "bit"
%token BITWISE       "bitwise"
%token BLOCK         "block"
%token CASE          "case"
%token CLOSEPAREN    ")"
%token COLON         ":"
%token DECLARATIONS  "declarations"
%token DEFINE        "define"
%token DOT           "."
%token DOUBLE_ARROW  "=>"
%token ENCLOSING     "enclosing"
%token ENUM          "enum"
%token ERROR         "error"
%token EVAL          "eval"
%token HEADER        "header"
%token IF            "if"
%token IS            "is"
%token I32_CONST     "i32.const"
%token I64_CONST     "i64.const"
%token LAST          "last"
%token LITERAL       "literal"
%token LOCAL         "local"
%token LOCALS        "locals"
%token LOOP          "loop"
%token LOOP_UNBOUNDED "loop.unbounded"
%token MAP           "map"
%token NEGATE        "negate"
%token NOT           "not"
%token OPCODE        "opcode"
%token OPENPAREN     "("
%token OR            "or"
%token PARAM         "param"
%token PARAMS        "params"
%token PEEK          "peek"
%token READ          "read"
%token RENAME        "rename"
%token SEQ           "seq"
%token SET           "set"
%token SWITCH        "switch"
%token SYMBOL        "symbol"
%token TABLE         "table"
%token UINT8         "uint8"
%token UINT32        "uint32"
%token UINT64        "uint64"
%token UNDEFINE      "undefine"
%token U8_CONST      "u8.const"
%token U32_CONST     "u32.const"
%token U64_CONST     "u64.const"
%token VARINT32      "varint32"
%token VARINT64      "varint64"
%token VARUINT32     "varuint32"
%token VARUINT64     "varuint64"
%token VOID          "void"
%token WRITE         "write"
%token XOR           "xor"

// Terminal classes
%token <std::string> IDENTIFIER
%token <wasm::filt::IntValue> INTEGER

// Nonterminal classes.
%type <wasm::filt::Node *> block_args
%type <wasm::filt::Node *> bool_expression
%type <wasm::filt::Node *> case
%type <wasm::filt::Node *> case_args
%type <wasm::filt::Node *> case_list
%type <wasm::filt::SwitchNode *> switch_args
%type <wasm::filt::Node *> constant_expression
%type <wasm::filt::Node *> constant_use_expression
%type <wasm::filt::Node *> control_flow
%type <wasm::filt::Node *> declaration
%type <wasm::filt::Node *> define_args
%type <wasm::filt::Node *> eval_args
%type <wasm::filt::Node *> expression
%type <wasm::filt::Node *> expression_redirect
%type <wasm::filt::Node *> file
%type <wasm::filt::Node *> file_contents
%type <wasm::filt::Node *> file_header
%type <wasm::filt::Node *> file_header_args
/*%type <wasm::filt::Node *> file_header_optional*/
%type <wasm::filt::Node *> fixed_format_directive
%type <wasm::filt::Node *> format_binary
%type <wasm::filt::Node *> format_directive
%type <wasm::filt::Node *> literal_action_args
%type <wasm::filt::Node *> literal_expression
%type <wasm::filt::Node *> locals_decl
%type <wasm::filt::Node *> local_var
%type <wasm::filt::Node *> loop_body
%type <wasm::filt::MapNode *> map_args
%type <wasm::filt::OpcodeNode *> opcode_args
%type <wasm::filt::Node *> params_decl
%type <wasm::filt::Node *> section
%type <wasm::filt::Node *> sequence_args
%type <wasm::filt::Node *> symbol
%type <wasm::filt::Node *> table_args
%type <wasm::filt::Node *> write_args

%start file

%%

block_args
        : expression  {
            $$ = Driver.create<BlockNode>($1);
          }
        | block_args expression {
            $$ = $1;
            Driver.appendArgument($1, $2);
          }
        ;

bool_expression
        : "(" "and" expression expression ")" {
            $$ = Driver.create<AndNode>($3, $4);
          }
        | "(" "not" expression ")" {
            $$ = Driver.create<NotNode>($3);
          }
        | "(" "or" expression expression ")" {
            $$ = Driver.create<OrNode>($3, $4);
          }
        | "(" "bitwise" "." "and" expression expression ")" {
            $$ = Driver.create<BitwiseAndNode>($5, $6);
          }
        | "(" "bitwise" "." "or" expression expression ")" {
            $$ = Driver.create<BitwiseOrNode>($5, $6);
          }
        | "(" "bitwise" "." "xor" expression expression ")" {
            $$ = Driver.create<BitwiseXorNode>($5, $6);
          }
        | "(" "bitwise" "." "negate" expression ")" {
            $$ = Driver.create<BitwiseNegateNode>($5);
          }
        | "(" "last" "." "symbol" "." "is" symbol ")" {
            $$ = Driver.create<LastSymbolIsNode>($7);
          }
        ;

case    : "(" case_list ")" { $$ = $2; }
        ;

case_args
        : constant_expression expression {
           // case index/first expression of case.
            $$ = Driver.create<CaseNode>($1, $2);
          }
        | case_args expression {
            // remaining expressions of case.
            $$ = $1;
            Driver.appendArgument($1, $2);
          }
        ;

case_list
       : "case" constant_expression case_list {
           $$ = Driver.create<CaseNode>($2, $3);
         }
       | "case" case_args {
           $$ = $2;
         }
       ;

constant_expression
        : literal_expression {
            $$ = $1;
          }
        | symbol {
            $$ = Driver.create<LiteralUseNode>($1);
          }
        ;

constant_use_expression
        : literal_expression {
            $$ = $1;
          }
        | symbol {
            $$ = Driver.create<LiteralActionUseNode>($1);
          }
        ;

control_flow
        : "(" "block" block_args ")"  { $$ = $3; }
        | "(" "set" local_var expression ")" {
            $$ = Driver.create<SetNode>($3, $4);
          }
        | "(" "if" expression expression ")" {
            $$ = Driver.create<IfThenNode>($3, $4);
          }
        | "(" "if" expression expression expression ")" {
            $$ = Driver.create<IfThenElseNode>($3, $4, $5);
          }
        | "(" loop_body ")" { $$ = $2; }
        | "(" "switch" switch_args ")" {
            $$ = $3;
          }
        | "(" "seq" sequence_args ")" { $$ = $3; }
        ;

declaration
        : "(" "define" define_args ")" {
            $$ = $3;
          }
        | "(" "rename" symbol symbol ")" {
            $$ = Driver.create<RenameNode>($3, $4);
          }
        | "(" "undefine" symbol ")" {
            $$ = Driver.create<UndefineNode>($3);
          }
        | "(" "literal" symbol literal_expression ")" {
            $$ = Driver.create<LiteralDefNode>($3, $4);
          }
        | "(" "literal" "." "action" symbol literal_expression ")" {
            $$ = Driver.create<LiteralActionDefNode>($5, $6);
          }
        | "(" "literal" "." "action" "." "enum" literal_action_args ")" {
            $$ = $7;
          }
        ;

define_args
        : symbol params_decl expression {
            $$ = Driver.create<DefineNode>();
            $$->append($1);
            $$->append($2);
            $$->append($3);
          }
        | symbol params_decl locals_decl expression {
            $$ = Driver.create<DefineNode>();
            $$->append($1);
            $$->append($2);
            $$->append($3);
            $$->append($4);
          }
        | define_args expression {
            $$ = $1;
            Driver.appendArgument($1, $2);
          }
        ;

expression
        : format_directive { $$ = $1; }
        | constant_expression { $$ = $1; }
        | bool_expression { $$ = $1; }
        | control_flow { $$ = $1; }
        | "(" "map" map_args ")" { $$ = $3; }
        | "(" "=>" constant_use_expression ")" {
            $$ = Driver.create<CallbackNode>($3);
          }
        | "(" "param" INTEGER ")" {
            $$ = Driver.getOrCreateParam($3.Value, $3.Format);
          }
        | local_var { $$ = $1; }
        | "(" "error" ")" {
            $$ = Driver.create<ErrorNode>();
          }
        | "(" "eval" eval_args ")" {
            $$ = $3;
          }
        | "(" "read" ")" {
            $$ = Driver.create<LastReadNode>();
          }
        | "(" "write" write_args ")" {
            $$ = $3;
          }
        | "(" expression_redirect ")" {
            $$ = $2;
          }
        |  "(" "table" table_args ")" {
            $$ = $3;
           }
        | case { $$ = $1; }
        ;

expression_redirect
        : "peek" expression {
            $$ = Driver.create<PeekNode>($2);
          }
        | "read" expression {
            $$ = Driver.create<ReadNode>($2);
          }
        | expression_redirect expression {
            $$ = $1;
            Driver.appendArgument($1, $2);
          }
        ;

eval_args
        : symbol {
            $$ = Driver.create<EvalNode>();
            $$->append($1);
          }
        | eval_args expression {
            $$ = $1;
            $$->append($2);
        }
        ;

file
         : file_contents { $$ = $1; }
         | "(" "enclosing" IDENTIFIER ")" file_contents {
             $$ = $5;
             Driver.setEnclosing($3);
           }
         ;

file_contents
         : file_header file_header file_header section {
             $$ = Driver.create<FileNode>();
             $$->append($1);
             $$->append($2);
             $$->append($3);
             $$->append($4);
             Driver.setParsedAst($$);
           }
         | file_header file_header section {
             $$ = Driver.create<FileNode>();
             $$->append($1);
             $$->append($2);
             $$->append($3);
             Driver.setParsedAst($$);
           }
         | file_header section {
             $$ = Driver.create<FileNode>();
             $$->append($1);
             $$->append($2);
             Driver.setParsedAst($$);
           }
         | section {
             $$ = Driver.create<FileNode>();
             $$->append($1);
             Driver.setParsedAst($$);
           }
        ;

file_header
        : "(" "header" file_header_args ")" {
            $$ = $3;
          }
        | "(" "void" ")" {
            $$ = Driver.create<VoidNode>();
          }
        ;

file_header_args
        : %empty {
            $$ = Driver.create<FileHeaderNode>();
          }
        | file_header_args literal_expression {
            $$ = $1;
            $$->append($2);
          }
        ;
/*
file_header_optional
        : file_header {
            $$ = $1;
          }
        | "(" "void" ")" {
            $$ = Driver.create<VoidNode>();
          }
        ;
*/

fixed_format_directive
        : "(" "void" ")" {
            $$ = Driver.create<VoidNode>();
          }
        | "(" "bit" ")" {
            $$ = Driver.create<BitNode>();
          }
        | "(" "uint8" ")" {
            $$ = Driver.create<Uint8Node>();
          }
        | "(" "uint32" ")" {
            $$ = Driver.create<Uint32Node>();
          }
        | "(" "uint64" ")" {
          $$ = Driver.create<Uint64Node>();
          }
        ;

format_directive
        : fixed_format_directive { $$ = $1; }
        | "(" "opcode" opcode_args ")" {
            $$ = $3;
          }
        | "(" "varint32" ")" {
            $$ = Driver.create<Varint32Node>();
          }
        | "(" "varint64" ")" {
            $$ = Driver.create<Varint64Node>();
          }
        | "(" "varuint32" ")" {
            $$ = Driver.create<Varuint32Node>();
          }
        | "(" "varuint64" ")" {
            $$ = Driver.create<Varuint64Node>();
          }
        | "(" "opcode" format_binary ")" {
            $$ = Driver.create<BinaryEvalNode>($3);
          }
        ;

format_binary
        : "(" "accept" ")" {
            $$ = Driver.create<BinaryAcceptNode>();
          }
        | "(" "accept" INTEGER ":" INTEGER ")" {
            if ($3.Format != decode::ValueFormat::Hexidecimal
                || $5.Format != decode::ValueFormat::Decimal
                || $5.Value >= std::numeric_limits<unsigned>::max())
              Driver.error("Malformed accept arguments");
            $$ = Driver.createBinaryAccept($3.Value, unsigned($5.Value));
          }
        | "(" "binary" format_binary format_binary ")" {
            $$ = Driver.create<BinarySelectNode>($3, $4);
          }
        ;

literal_action_args
        : literal_expression symbol {
            $$ = Driver.create<LiteralActionBaseNode>();
            $$->append($1);
            $$->append($2);
           }
        | literal_action_args symbol {
            $$ = $1;
            $$->append($2);
          }
        ;

literal_expression
        : "(" "i32.const" INTEGER ")" {
            $$ = Driver.getOrCreateI32Const($3.Value, $3.Format);
          }
        | "(" "i64.const" INTEGER ")" {
            $$ = Driver.getOrCreateI64Const($3.Value, $3.Format);
          }
        | "(" "u8.const" INTEGER ")" {
            $$ = Driver.getOrCreateU8Const($3.Value, $3.Format);
          }
        | "(" "u32.const" INTEGER ")" {
            $$ = Driver.getOrCreateU32Const($3.Value, $3.Format);
          }
        | "(" "u64.const" INTEGER ")" {
            $$ = Driver.getOrCreateU64Const($3.Value, $3.Format);
          }
        ;

local_var
        : "(" "local" INTEGER ")" {
            $$ = Driver.getOrCreateLocal($3.Value, $3.Format);
          }
        ;

locals_decl
        : "(" "locals" INTEGER ")" {
            $$ = Driver.getOrCreateLocals($3.Value, $3.Format);
          }
        ;

loop_body
        : "loop" expression expression {
            $$ = Driver.create<LoopNode>($2, $3);
          }
        | "loop.unbounded" expression {
            $$ = Driver.create<LoopUnboundedNode>($2);
          }
        | loop_body expression {
            $$ = $1;
            Driver.appendArgument($1, $2);
          }
        ;

map_args
        : expression case {
            $$ = Driver.create<MapNode>();
          }
        | map_args case {
            $$ = $1;
            $1->append($2);
          }
        ;

opcode_args
        : fixed_format_directive {
            $$ = Driver.create<OpcodeNode>();
            $$->append($1);
          }
        | opcode_args case {
            $$ = $1;
            $$->append($2);
          }
        ;

params_decl
        : "(" "params" INTEGER ")" {
            $$ = Driver.getOrCreateParams($3.Value, $3.Format);
          }
        | "(" "params" ")" {
            $$ = Driver.getOrCreateParams();
          }
        ;

section
        : "(" "declarations" ")"  {
            $$ = Driver.create<SectionNode>();
          }
          | section declaration { // defines etc.
            $$ = $1;
            $$->append($2);
          }
        ;

sequence_args
        : %empty {
            $$ = Driver.create<SequenceNode>();
          }
        | sequence_args expression {
            $$ = $1;
            $$->append($2);
          }
        ;

switch_args
        : expression expression {
            // selector / default expresssions
            $$ = Driver.create<SwitchNode>();
            $$->append($1);
            $$->append($2);
          }
        | switch_args case {
            // Additional cases.
            $$ = $1;
            $$->append($2);
          }
        ;

write_args
        : format_directive expression {
            $$ = Driver.create<WriteNode>();
            $$->append($1);
            $$->append($2);
          }
        | write_args expression {
            $$ = $1;
            $$->append($2);
          }
        ;

symbol  : IDENTIFIER { $$ = Driver.getOrCreateSymbol($1); }
        ;

table_args
        : expression expression {
            $$ = Driver.create<TableNode>($1, $2);
          }
        | table_args expression {
            Driver.appendArgument($1, $2);
            $$ = $1;
          }
        ;

%%

void wasm::filt::Parser::error(const location_type& L, const std::string& M) {
  Driver.error(L, M);
}

/* -*- C++ -*- */
/*
 * Copyright 2016 WebAssembly Community Group participants
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%skeleton "lalr1.cc"

/* Textual parser for filter s-expressions */

%defines
%define api.namespace {wasm::filt}
%define parser_class_name {Parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert

%code requires {
#include "sexp/Ast.h"
#include <string>

namespace wasm {
namespace filt {
class Driver;
class Node;

struct IntegerValue {
  wasm::decode::IntType Value;
  wasm::filt::IntegerNode::ValueFormat Format;
};

}}

#ifdef __clang__
// TODO: Limit the reach of these pragma's?
#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wundefined-inline"
#endif // __clang__
}

// The parsing context.
%param { class Driver& Driver }

%locations
%initial-action
{
  // Initialize the initial location.
  @$.begin.filename = @$.end.filename = &Driver.getFilename();
};

%define parse.trace
%define parse.error verbose

%code
{
// Note: Must follow definitions above, so that location_type is declared.
# include "Driver.h"

}

// Special tokens
%token END 0 "$END"

// Keywords
%token APPEND        "append"
%token AST_TO_BIT    "ast.to.bit"
%token AST_TO_BYTE   "ast.to.byte"
%token AST_TO_INT    "ast.to.int"
%token BIT_TO_BIT    "bit.to.bit"
%token BIT_TO_BYTE   "bit.to.byte"
%token BIT_TO_INT    "bit.to.int"
%token BIT_TO_AST    "bit.to.ast"
%token BLOCK         "block"
%token BLOCKBEGIN    "block.begin"
%token BLOCKEND      "block.end"
%token BYTE_TO_BIT   "byte.to.bit"
%token BYTE_TO_BYTE  "byte.to.byte"
%token BYTE_TO_INT   "byte.to.int"
%token BYTE_TO_AST   "byte.to.ast"
%token CASE          "case"
%token CLOSEPAREN    ")"
%token COPY          "copy"
%token DEFAULT       "default"
%token DEFINE        "define"
%token ERROR         "error"
%token EVAL          "eval"
%token FILTER        "filter"
%token IF            "if"
%token INT_TO_BIT    "int.to.bit"
%token INT_TO_BYTE   "int.to.byte"
%token INT_TO_INT    "int.to.int"
%token INT_TO_AST    "int.to.ast"
%token I32_CONST     "i32.const"
%token I64_CONST     "i64.const"
%token LIT           "lit"
%token LOOP          "loop"
%token LOOP_UNBOUNDED "loop.unbounded"
%token OPENPAREN     "("
%token MAP           "map"
%token PEEK          "peek"
%token POSTORDER     "postorder"
%token PREORDER      "preorder"
%token READ          "read"
%token SECTION       "section"
%token SELECT        "select"
%token SEQ           "seq"
%token SYM_CONST     "sym.const"
%token UINT8         "uint8"
%token UINT32        "uint32"
%token UINT64        "uint64"
%token UNDEFINE      "undefine"
%token U32_CONST     "u32.const"
%token U64_CONST     "u64.const"
%token VALUE         "value"
%token VARINT32      "varint32"
%token VARINT64      "varint64"
%token VARUINT1      "varuint1"
%token VARUINT7      "varuint7"
%token VARUINT32     "varuint32"
%token VARUINT64     "varuint64"
%token VERSION       "version"
%token VOID          "void"
%token WRITE         "write"

// Terminal classes
%token <std::vector<uint8_t>> IDENTIFIER
%token <wasm::filt::IntegerValue> INTEGER

// Nonterminal classes.
%type <wasm::filt::Node *> case
%type <wasm::filt::Node *> case_list
%type <wasm::filt::Node *> case_statement_list
%type <wasm::filt::Node *> declaration
%type <wasm::filt::Node *> declaration_list
%type <wasm::filt::Node *> declaration_stmt_list
%type <wasm::filt::Node *> expression
%type <wasm::filt::Node *> file
%type <wasm::filt::Node *> integer
%type <wasm::filt::Node *> stream_conv
%type <wasm::filt::Node *> stream_conv_list
%type <wasm::filt::Node *> stream_conv_stmt_list
%type <wasm::filt::Node *> header
%type <wasm::filt::Node *> loop_body
%type <wasm::filt::Node *> section
%type <wasm::filt::Node *> section_list
%type <wasm::filt::Node *> seq_statement_list
%type <wasm::filt::Node *> statement
%type <wasm::filt::Node *> symbol

%start file

%%

file    : section_list {
            $$ = $1;
            Driver.setParsedAst($1);
          }
        ;

case    : "(" "case" case_statement_list ")" { $$ = $3; }
        ;

case_list
        : expression statement { // selector / default statement.
            $$ = Driver.create<Nary<NodeType::Select>>();
            $$->append($1);
            $$->append($2);
          }
        | case_list case {
            $$ = $1;
            $$->append($2);
          }
        ;

case_statement_list
        : integer statement { // case index / first statement of case.
            $$ = Driver.create<Nary<NodeType::Case>>();
            $$->append($1);
            $$->append($2);
          }
        | case_statement_list statement { // remaining statements of case.
            $$ = $1;
            $$->append($2);
          }
        ;

declaration
        : "(" declaration_stmt_list ")" {
            $$ = $2;
          }
        | "(" "undefine" symbol ")" {
            $$ = Driver.create<Unary<NodeType::Undefine>>($3);
          }
        ;

declaration_stmt_list
        : "default" symbol statement {
            $$ = Driver.create<Nary<NodeType::Default>>();
            $$->append($2);
            $$->append($3);
          }
        | "define" symbol statement {
            $$ = Driver.create<Nary<NodeType::Define>>();
            $$->append($2);
            $$->append($3);
          }
        | declaration_stmt_list statement {
            $$ = $1;
            $$->append($2);
          }
        ;


declaration_list
        : symbol declaration {  // Section name / first define.
            $$ = Driver.create<Nary<NodeType::Section>>();
            $$->append($1);
            $$->append($2);
          }
          | declaration_list declaration { // Additional defines.
            $$ = $1;
            $$->append($2);
          }
        ;

expression
        : "(" "append" ")" {
            $$ = Driver.create<Nullary<NodeType::AppendNoArgs>>();
          }
        | "(" "append" expression ")" {
            $$ = Driver.create<Unary<NodeType::AppendOneArg>>($3);
          }
        | "(" "block" expression ")" {
            // 1st argument is width in bytes
            $$ = Driver.create<Unary<NodeType::BlockOneArg>>($3);
          }
        | "(" "block" expression integer ")" {
            // 1st argument is width in bytes
            // 2nd argument is block.end value to inject
            $$ = Driver.create<Binary<NodeType::BlockTwoArgs>>($3, $4);
          }
        | "(" "block" expression integer integer ")" {
            // 1st argument is width in bytes
            // 2nd argument is block.begin value to inject
            // 3nd argument is block.end value to inject
            $$ = Driver.create<Ternary<NodeType::BlockThreeArgs>>($3, $4, $5);
          }
        | "(" "block.begin" ")" {
            $$ = Driver.create<Nullary<NodeType::BlockBegin>>();
          }
        | "(" "block.end" ")" {
            $$ = Driver.create<Nullary<NodeType::BlockEnd>>();
          }
        | "(" "error" ")" {
            $$ = Driver.create<Nullary<NodeType::Error>>();
          }
        | "(" "eval" symbol ")" {
            $$ = Driver.create<Unary<NodeType::Eval>>($3);
          }
        | "(" "i32.const" integer ")" {
            $$ = Driver.create<Unary<NodeType::I32Const>>($3);
          }
        | "(" "i64.const" integer ")" {
            $$ = Driver.create<Unary<NodeType::I64Const>>($3);
          }
        | "(" "lit" integer ")" {
            $$ = Driver.create<Unary<NodeType::Lit>>($3);
          }
        | "(" "map" expression expression ")" {
            $$ = Driver.create<Binary<NodeType::Map>>($3, $4);
          }
        | "(" "peek" expression ")" {
            $$ = Driver.create<Unary<NodeType::Peek>>($3);
          }
        | "(" "postorder" integer ")" {
            $$ = Driver.create<Unary<NodeType::Postorder>>($3);
          }
        | "(" "preorder" integer ")" {
            $$ = Driver.create<Unary<NodeType::Preorder>>($3);
          }
        | "(" "read" expression ")" {
            $$ = Driver.create<Unary<NodeType::Read>>($3);
          }
        | "(" "sym.const" symbol ")" {
            $$ = Driver.create<Unary<NodeType::SymConst>>($3);
          }
        | "(" "uint8" ")" {
            $$ = Driver.create<Nullary<NodeType::Uint8>>();
          }
        | "(" "uint32" ")" {
            $$ = Driver.create<Nullary<NodeType::Uint32NoArgs>>();
          }
        | "(" "uint32" integer ")"  {
            $$ = Driver.create<Unary<NodeType::Uint32OneArg>>($3);
          }
        | "(" "uint64" ")" {
            $$ = Driver.create<Nullary<NodeType::Uint64NoArgs>>();
          }
        | "(" "uint64" integer ")"  {
            $$ = Driver.create<Unary<NodeType::Uint64OneArg>>($3);
          }
        | "(" "u32.const" integer ")" {
            $$ = Driver.create<Unary<NodeType::U32Const>>($3);
          }
        | "(" "u64.const" integer ")" {
            $$ = Driver.create<Unary<NodeType::U64Const>>($3);
          }
        | "(" "value" ")" {
            $$ = Driver.create<Nullary<NodeType::Value>>();
          }
        | "(" "varint32" ")" {
            $$ = Driver.create<Nullary<NodeType::Varint32NoArgs>>();
          }
        | "(" "varint32" integer ")" {
            $$ = Driver.create<Unary<NodeType::Varint32OneArg>>($3);
          }
        | "(" "varint64" ")" {
            $$ = Driver.create<Nullary<NodeType::Varint64NoArgs>>();
          }
        | "(" "varint64" integer ")" {
            $$ = Driver.create<Unary<NodeType::Varint64OneArg>>($3);
          }
        | "(" "varuint1" ")" {
            $$ = Driver.create<Nullary<NodeType::Varuint1>>();
          }
        | "(" "varuint7" ")" {
            $$ = Driver.create<Nullary<NodeType::Varuint7>>();
          }
        | "(" "varuint32" ")" {
            $$ = Driver.create<Nullary<NodeType::Varuint32NoArgs>>();
          }
        | "(" "varuint32" integer ")" {
            $$ = Driver.create<Unary<NodeType::Varuint32OneArg>>($3);
          }
        | "(" "varuint64" ")" {
            $$ = Driver.create<Nullary<NodeType::Varuint64NoArgs>>();
          }
        | "(" "varuint64" integer ")" {
            $$ = Driver.create<Unary<NodeType::Varuint64OneArg>>($3);
          }
        | "(" "void" ")" {
            $$ = Driver.create<Nullary<NodeType::Void>>();
          }
        | "(" "write" expression ")" {
            $$ = Driver.create<Unary<NodeType::Write>>($3);
          }
        ;

header  : "(" "version" integer ")" {
            $$ = Driver.create<Unary<NodeType::Version>>($3);
          }
        ;

integer : INTEGER {
           $$ = Driver.create<IntegerNode>($1.Value, $1.Format);
          }

loop_body
        : "loop" expression {
           $$ = Driver.create<Nary<NodeType::Loop>>();
            $$->append($2);
          }
        | "loop.unbounded" {
            $$ = Driver.create<Nary<NodeType::LoopUnbounded>>();
          }
        | loop_body statement {
            $$ = $1;
            $$->append($2);
          }
        ;

section : "(" "section" declaration_list ")" { $$ = $3; }
        ;

section_list
        : header section { // Header / first section of file.
            $$ = Driver.create<Nary<NodeType::File>>();
            $$->append($1);
            $$->append($2);
          }
        | section_list section { // Remaining sections in file.
            $$ = $1;
            $$->append($2);
          }
        ;

seq_statement_list
        : %empty {
            $$ = Driver.create<Nary<NodeType::Sequence>>();
          }
        | seq_statement_list statement {
            $$ = $1;
            $$->append($2);
          }
        ;

statement
        : expression { $$ = $1; }
        | "(" "copy" ")" {
            $$ = Driver.create<Nullary<NodeType::Copy>>();
          }
        | stream_conv { $$ = $1; }
        | "(" "filter" stream_conv_list ")" { $$ = $3; }
        | "(" "if" expression statement statement ")" {
            $$ = Driver.create<Ternary<NodeType::IfThenElse>>($3, $4, $5);
          }
        | "(" loop_body ")" { $$ = $2; }
        | "(" "select" case_list ")" { $$ = $3; }
        | "(" "seq" seq_statement_list ")" { $$ = $3; }
        ;

stream_conv  : "(" stream_conv_stmt_list ")" {
            $$ = $2;
          }
        ;

stream_conv_list
        : stream_conv {
            $$ = Driver.create<Nary<NodeType::Filter>>();
            $$->append($1);
          }
        | stream_conv_list stream_conv {
            $$ = $1;
            $$->append($2);
          }
        ;

stream_conv_stmt_list
        : "ast.to.ast" statement {
           $$ = Driver.create<Nary<NodeType::AstToAst>>();
            $$->append($2);
          }
        | "ast.to.bit" statement  {
            $$ = Driver.create<Nary<NodeType::AstToBit>>();
            $$->append($2);
          }
        | "ast.to.byte" statement {
            $$ = Driver.create<Nary<NodeType::AstToByte>>();
            $$->append($2);
          }
        | "ast.to.int" statement {
            $$ = Driver.create<Nary<NodeType::AstToInt>>();
            $$->append($2);
          }
        | "bit.to.bit" statement {
            $$ = Driver.create<Nary<NodeType::BitToBit>>();
            $$->append($2);
          }
        | "bit.to.byte" statement {
           $$ = Driver.create<Nary<NodeType::BitToByte>>();
            $$->append($2);
          }
        | "bit.to.int" statement {
            $$ = Driver.create<Nary<NodeType::BitToInt>>();
            $$->append($2);
          }
        | "bit.to.ast" statement {
            $$ = Driver.create<Nary<NodeType::BitToAst>>();
            $$->append($2);
          }
        | "byte.to.bit" statement {
            $$ = Driver.create<Nary<NodeType::ByteToBit>>();
            $$->append($2);
          }
        | "byte.to.byte" statement {
            $$ = Driver.create<Nary<NodeType::ByteToByte>>();
            $$->append($2);
          }
        | "byte.to.int" statement {
            $$ = Driver.create<Nary<NodeType::ByteToInt>>();
            $$->append($2);
          }
        | "byte.to.ast" statement {
            $$ = Driver.create<Nary<NodeType::ByteToAst>>();
            $$->append($2);
          }
        | "int.to.bit" statement  {
            $$ = Driver.create<Nary<NodeType::IntToBit>>();
            $$->append($2);
          }
        | "int.to.byte" statement {
            $$ = Driver.create<Nary<NodeType::IntToByte>>();
            $$->append($2);
          }
        | "int.to.int" statement {
            $$ = Driver.create<Nary<NodeType::IntToInt>>();
            $$->append($2);
          }
        | "int.to.ast" statement {
            $$ = Driver.create<Nary<NodeType::IntToAst>>();
            $$->append($2);
          }
        | stream_conv_stmt_list statement {
            $$ = $1;
            $$->append($2);
          }
        ;

symbol  : IDENTIFIER { $$ = Driver.create<SymbolNode>($1); }
        ;

%%

void wasm::filt::Parser::error(const location_type& L, const std::string& M) {
  Driver.error(L, M);
}

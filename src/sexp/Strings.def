//
// Copyright 2016 WebAssembly Community Group participants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Defines predefined indices for symbols in decompressor s-expressions

//#define X(tag, name)
#define PREDEFINED_SYMBOLS_TABLE                                               \
X(Align, "align") \
X(Block_enter, "block.enter") \
X(Block_enter_readonly, "block.enter.readonly") \
X(Block_enter_writeonly, "block.enter.writeonly") \
X(Block_exit, "block.exit") \
X(Block_exit_readonly, "block.exit.readonly") \
X(Block_exit_writeonly, "block.exit.writeonly") \
X(Br_table, "br_table") \
X(Br_table_begin, "br_table.begin") \
X(Br_table_count, "br_table.count") \
X(Br_table_default, "br_table.default") \
X(Br_table_end, "br_table.end") \
X(Br_table_target, "br_table.target") \
X(Br_target, "br_target") \
X(Br_target_begin, "br_target.begin") \
X(Br_target_end, "br_target.end") \
X(Code_section, "code.section") \
X(Code_section_begin, "code.section.begin") \
X(Code_section_count, "code.section.count") \
X(Code_section_end, "code.section.end") \
X(Data_section, "data.section") \
X(Data_section_begin, "data.section.begin") \
X(Data_section_count, "data.section.count") \
X(Data_section_end, "data.section.end") \
X(Data_segment, "data_segment") \
X(Data_segment_begin, "data_segment.begin") \
X(Data_segment_data, "data_segment.data") \
X(Data_segment_end, "data_segment.end") \
X(Data_segment_memory_index, "data_segment.memory_index") \
X(Data_segment_size, "data_segment.size") \
X(Element_section, "element.section") \
X(Element_section_begin, "element.section.begin") \
X(Element_section_count, "element.section.count") \
X(Element_section_end, "element.section.end") \
X(Element_segment, "element_segment") \
X(Element_segment_begin, "element_segment.begin") \
X(Element_segment_elem, "element_segment.elem") \
X(Element_segment_end, "element_segment.end") \
X(Element_segment_index, "element_segment.index") \
X(Element_segment_num_elem, "element_segment.num_elem") \
X(Element_segment_offset, "element_segment.offset") \
X(Export_entry, "export.entry") \
X(Export_entry_index, "export.entry.index") \
X(Export_entry_name, "export.entry.name") \
X(Export_section, "export.section") \
X(Export_section_begin, "export.section.begin") \
X(Export_section_count, "export.section.count") \
X(Export_section_end, "export.section.end") \
X(External_kind, "external_kind") \
X(External_kind_begin, "external_kind.begin") \
X(External_kind_end, "external_kind.end") \
X(External_kind_function, "external_kind.function") \
X(External_kind_global, "external_kind.global") \
X(External_kind_memory, "external_kind.memory") \
X(External_kind_table, "external_kind.table") \
X(File, "file") \
X(File_begin, "file.begin") \
X(File_end, "file.end") \
X(Function_body, "function_body") \
X(Function_body_begin, "function_body.begin") \
X(Function_body_code_begin, "function_body.code.begin") \
X(Function_body_code_end, "function_body.code.end") \
X(Function_body_end, "function_body.end") \
X(Function_body_local_count, "function_body.local_count") \
X(Function_names, "function_names") \
X(Function_names_begin, "function_names.begin") \
X(Function_names_end, "function_names.end") \
X(Function_names_fcn_name, "function_names.fcn_name") \
X(Function_names_local_count, "function_names.local_count") \
X(Function_names_local_name, "function_names.local_name") \
X(Function_section, "function.section") \
X(Function_section_begin, "function.section.begin") \
X(Function_section_count, "function.section.count") \
X(Function_section_end, "function.section.end") \
X(Function_section_type, "function.section.type") \
X(Function_type, "function_type") \
X(Function_type_begin, "function_type.begin") \
X(Function_type_end, "function_type.end") \
X(Function_type_form, "function_type.form") \
X(Global_section, "global.section") \
X(Global_section_begin, "global.section.begin") \
X(Global_section_count, "global.section.count") \
X(Global_section_end, "global.section.end") \
X(Global_section_variable_init, "global.section.variable.init") \
X(Global_section_variable_type, "global.section.variable.type") \
X(Global_type, "global_type") \
X(Global_type_begin, "global_type.begin") \
X(Global_type_end, "global_type.end") \
X(Import_entry, "import_entry") \
X(Import_entry_begin, "import_entry.begin") \
X(Import_entry_end, "import_entry.end") \
X(Import_entry_field, "import_entry.field") \
X(Import_entry_function, "import_entry.function") \
X(Import_entry_global, "import_entry.global") \
X(Import_entry_memory, "import_entry.memory") \
X(Import_entry_module, "import_entry.module") \
X(Import_entry_table, "import_entry.table") \
X(Import_section, "import.section") \
X(Import_section_begin, "import.section.begin") \
X(Import_section_count, "import.section.count") \
X(Import_section_end, "import.section.end") \
X(Init_expr, "init_expr") \
X(Init_expr_begin, "init_expr.begin") \
X(Init_expr_end, "init_expr.end") \
X(Init_expr_opcode, "init_expr.opcode") \
X(Inst_block, "inst.block") \
X(Inst_br, "inst.br") \
X(Inst_br_if, "inst.br_if") \
X(Inst_br_table, "inst.br_table") \
X(Inst_call, "inst.call") \
X(Inst_call_indirect, "inst.call_indirect") \
X(Inst_current_memory, "inst.current_memory") \
X(Inst_drop, "inst.drop") \
X(Inst_else, "inst.else") \
X(Inst_end, "inst.end") \
X(Inst_f32_abs, "inst.f32.abs") \
X(Inst_f32_add, "inst.f32.add") \
X(Inst_f32_ceil, "inst.f32.ceil") \
X(Inst_f32_const, "inst.f32.const") \
X(Inst_f32_convert_s_i32, "inst.f32.convert_s/i32") \
X(Inst_f32_convert_s_i64, "inst.f32.convert_s/i64") \
X(Inst_f32_convert_u_i32, "inst.f32.convert_u/i32") \
X(Inst_f32_convert_u_i64, "inst.f32.convert_u/i64") \
X(Inst_f32_copysign, "inst.f32.copysign") \
X(Inst_f32_demote_f64, "inst.f32.demote/f64") \
X(Inst_f32_div, "inst.f32.div") \
X(Inst_f32_eq, "inst.f32.eq") \
X(Inst_f32_floor, "inst.f32.floor") \
X(Inst_f32_ge, "inst.f32.ge") \
X(Inst_f32_gt, "inst.f32.gt") \
X(Inst_f32_le, "inst.f32.le") \
X(Inst_f32_load, "inst.f32.load") \
X(Inst_f32_lt, "inst.f32.lt") \
X(Inst_f32_max, "inst.f32.max") \
X(Inst_f32_min, "inst.f32.min") \
X(Inst_f32_mul, "inst.f32.mul") \
X(Inst_f32_ne, "inst.f32.ne") \
X(Inst_f32_nearest, "inst.f32.nearest") \
X(Inst_f32_neg, "inst.f32.neg") \
X(Inst_f32_reinterpret_i32, "inst.f32.reinterpret/i32") \
X(Inst_f32_sqrt, "inst.f32.sqrt") \
X(Inst_f32_store, "inst.f32.store") \
X(Inst_f32_sub, "inst.f32.sub") \
X(Inst_f32_trunc, "inst.f32.trunc") \
X(Inst_f64_abs, "inst.f64.abs") \
X(Inst_f64_add, "inst.f64.add") \
X(Inst_f64_ceil, "inst.f64.ceil") \
X(Inst_f64_const, "inst.f64.const") \
X(Inst_f64_convert_s_i32, "inst.f64.convert_s/i32") \
X(Inst_f64_convert_s_i64, "inst.f64.convert_s/i64") \
X(Inst_f64_convert_u_i32, "inst.f64.convert_u/i32") \
X(Inst_f64_convert_u_i64, "inst.f64.convert_u/i64") \
X(Inst_f64_copysign, "inst.f64.copysign") \
X(Inst_f64_div, "inst.f64.div") \
X(Inst_f64_eq, "inst.f64.eq") \
X(Inst_f64_floor, "inst.f64.floor") \
X(Inst_f64_ge, "inst.f64.ge") \
X(Inst_f64_gt, "inst.f64.gt") \
X(Inst_f64_le, "inst.f64.le") \
X(Inst_f64_load, "inst.f64.load") \
X(Inst_f64_lt, "inst.f64.lt") \
X(Inst_f64_max, "inst.f64.max") \
X(Inst_f64_min, "inst.f64.min") \
X(Inst_f64_mul, "inst.f64.mul") \
X(Inst_f64_ne, "inst.f64.ne") \
X(Inst_f64_nearest, "inst.f64.nearest") \
X(Inst_f64_neg, "inst.f64.neg") \
X(Inst_f64_promote_f32, "inst.f64.promote/f32") \
X(Inst_f64_reinterpret_i64, "inst.f64.reinterpret/i64") \
X(Inst_f64_sqrt, "inst.f64.sqrt") \
X(Inst_f64_store, "inst.f64.store") \
X(Inst_f64_sub, "inst.f64.sub") \
X(Inst_f64_trunc, "inst.f64.trunc") \
X(Inst_get_global, "inst.get_global") \
X(Inst_get_local, "inst.get_local") \
X(Inst_grow_memory, "inst.grow_memory") \
X(Inst_i32_add, "inst.i32.add") \
X(Inst_i32_and, "inst.i32.and") \
X(Inst_i32_clz, "inst.i32.clz") \
X(Inst_i32_const, "inst.i32.const") \
X(Inst_i32_ctx, "inst.i32.ctx") \
X(Inst_i32_div_s, "inst.i32.div_s") \
X(Inst_i32_div_u, "inst.i32.div_u") \
X(Inst_i32_eq, "inst.i32.eq") \
X(Inst_i32_eqz, "inst.i32.eqz") \
X(Inst_i32_ge_s, "inst.i32.ge_s") \
X(Inst_i32_ge_u, "inst.i32.ge_u") \
X(Inst_i32_gt_s, "inst.i32.gt_s") \
X(Inst_i32_gt_u, "inst.i32.gt_u") \
X(Inst_i32_le_s, "inst.i32.le_s") \
X(Inst_i32_le_u, "inst.i32.le_u") \
X(Inst_i32_load, "inst.i32.load") \
X(Inst_i32_load16_s, "inst.i32.load16_s") \
X(Inst_i32_load16_u, "inst.i32.load16_u") \
X(Inst_i32_load8_s, "inst.i32.load8_s") \
X(Inst_i32_load8_u, "inst.i32.load8_u") \
X(Inst_i32_lt_s, "inst.i32.lt_s") \
X(Inst_i32_lt_u, "inst.i32.lt_u") \
X(Inst_i32_mul, "inst.i32.mul") \
X(Inst_i32_ne, "inst.i32.ne") \
X(Inst_i32_or, "inst.i32.or") \
X(Inst_i32_popcnt, "inst.i32.popcnt") \
X(Inst_i32_reinterpret_f32, "inst.i32.reinterpret/f32") \
X(Inst_i32_rem_s, "inst.i32.rem_s") \
X(Inst_i32_rem_u, "inst.i32.rem_u") \
X(Inst_i32_rotl, "inst.i32.rotl") \
X(Inst_i32_rotr, "inst.i32.rotr") \
X(Inst_i32_shl, "inst.i32.shl") \
X(Inst_i32_shr_s, "inst.i32.shr_s") \
X(Inst_i32_shr_u, "inst.i32.shr_u") \
X(Inst_i32_store, "inst.i32.store") \
X(Inst_i32_store16, "inst.i32.store16") \
X(Inst_i32_store8, "inst.i32.store8") \
X(Inst_i32_sub, "inst.i32.sub") \
X(Inst_i32_trunc_s_f32, "inst.i32.trunc_s/f32") \
X(Inst_i32_trunc_s_f64, "inst.i32.trunc_s/f64") \
X(Inst_i32_trunc_u_f32, "inst.i32.trunc_u/f32") \
X(Inst_i32_trunc_u_f64, "inst.i32.trunc_u/f64") \
X(Inst_i32_wrap_i64, "inst.i32.wrap/i64") \
X(Inst_i32_xor, "inst.i32.xor") \
X(Inst_i64_add, "inst.i64.add") \
X(Inst_i64_and, "inst.i64.and") \
X(Inst_i64_clz, "inst.i64.clz") \
X(Inst_i64_const, "inst.i64.const") \
X(Inst_i64_ctx, "inst.i64.ctx") \
X(Inst_i64_ctz, "inst.i64.ctz") \
X(Inst_i64_div_s, "inst.i64.div_s") \
X(Inst_i64_div_u, "inst.i64.div_u") \
X(Inst_i64_eq, "inst.i64.eq") \
X(Inst_i64_eqz, "inst.i64.eqz") \
X(Inst_i64_extend_s_i32, "inst.i64.extend_s/i32") \
X(Inst_i64_extend_u_i32, "inst.i64.extend_u/i32") \
X(Inst_i64_ge_s, "inst.i64.ge_s") \
X(Inst_i64_ge_u, "inst.i64.ge_u") \
X(Inst_i64_gt_s, "inst.i64.gt_s") \
X(Inst_i64_gt_u, "inst.i64.gt_u") \
X(Inst_i64_le_s, "inst.i64.le_s") \
X(Inst_i64_le_u, "inst.i64.le_u") \
X(Inst_i64_load, "inst.i64.load") \
X(Inst_i64_load16_s, "inst.i64.load16_s") \
X(Inst_i64_load16_u, "inst.i64.load16_u") \
X(Inst_i64_load32_s, "inst.i64.load32_s") \
X(Inst_i64_load32_u, "inst.i64.load32_u") \
X(Inst_i64_load8_s, "inst.i64.load8_s") \
X(Inst_i64_load8_u, "inst.i64.load8_u") \
X(Inst_i64_lt_s, "inst.i64.lt_s") \
X(Inst_i64_lt_u, "inst.i64.lt_u") \
X(Inst_i64_mul, "inst.i64.mul") \
X(Inst_i64_ne, "inst.i64.ne") \
X(Inst_i64_or, "inst.i64.or") \
X(Inst_i64_popcnt, "inst.i64.popcnt") \
X(Inst_i64_reinterpret_f64, "inst.i64.reinterpret/f64") \
X(Inst_i64_rem_s, "inst.i64.rem_s") \
X(Inst_i64_rem_u, "inst.i64.rem_u") \
X(Inst_i64_rotl, "inst.i64.rotl") \
X(Inst_i64_rotr, "inst.i64.rotr") \
X(Inst_i64_shl, "inst.i64.shl") \
X(Inst_i64_shr_s, "inst.i64.shr_s") \
X(Inst_i64_shr_u, "inst.i64.shr_u") \
X(Inst_i64_store, "inst.i64.store") \
X(Inst_i64_store16, "inst.i64.store16") \
X(Inst_i64_store32, "inst.i64.store32") \
X(Inst_i64_store8, "inst.i64.store8") \
X(Inst_i64_sub, "inst.i64.sub") \
X(Inst_i64_trunc_s_f32, "inst.i64.trunc_s/f32") \
X(Inst_i64_trunc_s_f64, "inst.i64.trunc_s/f64") \
X(Inst_i64_trunc_u_f32, "inst.i64.trunc_u/f32") \
X(Inst_i64_trunc_u_f64, "inst.i64.trunc_u/f64") \
X(Inst_i64_xor, "inst.i64.xor") \
X(Inst_if, "inst.if") \
X(Inst_loop, "inst.loop") \
X(Inst_nop, "inst.nop") \
/*X(Inst_param, "param")*/ \
/*X(Inst_params, "params")*/ \
/*X(Inst_return, "inst.return")*/ \
/*X(Inst_u8_const, "u8.const")*/ \
X(Instruction, "instruction") \
X(Instruction_begin, "instruction.begin") \
X(Instruction_end, "instruction.end") \
X(Instruction_opcode, "instruction.opcode") \
X(Inst_select, "inst.select") \
X(Inst_set_global, "inst.set_global") \
X(Inst_set_local, "inst.set_local") \
X(Inst_tee_local, "inst.tee_local") \
X(Inst_unreachable, "inst.unreachable") \
X(Int_value_begin, "int.value.begin") \
X(Int_value_end, "int.value.end") \
X(Literal_define, "literal.define") \
X(Local_entry, "local_entry") \
X(Local_entry_begin, "local_entry.begin") \
X(Local_entry_count, "local_entry.count") \
X(Local_entry_end, "local_entry.end") \
X(Memory_immediate, "memory_immediate") \
X(Memory_immediate_begin, "memory_immediate.begin") \
X(Memory_immediate_end, "memory_immediate.end") \
X(Memory_section, "memory.section") \
X(Memory_section_begin, "memory.section.begin") \
X(Memory_section_count, "memory.section.count") \
X(Memory_section_end, "memory.section.end") \
X(Memory_section_entry, "memory.section.entry") \
X(Memory_type, "memory_type") \
X(Memory_type_begin, "memory_type.begin") \
X(Memory_type_end, "memory_type.end") \
X(Name, "name") \
X(Name_section, "name.section") \
X(Name_section_begin, "name.section.begin") \
X(Name_section_count, "name.section.count") \
X(Name_section_end, "name.section.end") \
X(Resizable_limits, "resizable_limits") \
X(Resizable_limits_begin, "resizable_limits.begin") \
X(Resizable_limits_end, "resizable_limits.end") \
X(Resizable_limits_flags, "resizable_limits.flags") \
X(Resizable_limits_initial, "resizable_limits.initial") \
X(Resizable_limits_maximum, "resizable_limits.maximum") \
X(Section, "section") \
X(Section_begin, "section.begin") \
X(Section_code, "section.code") \
X(Section_end, "section.end") \
X(Skip_section, "skip_section") \
X(Skip_section_begin, "skip_section.begin") \
X(Skip_section_end, "skip_section.end") \
X(Start_section, "start.section") \
X(Start_section_begin, "start.section.begin") \
X(Start_section_end, "start.section.end") \
X(Symbol_lookup, "symbol.lookup") \
X(Symbol_name, "symbol_name") \
X(Symbol_name_begin, "symbol_name.begin") \
X(Symbol_name_end, "symbol_name.end") \
X(Symbol_name_length, "symbol_name.length") \
X(Table_section, "table.section") \
X(Table_section_begin, "table.section.begin") \
X(Table_section_count, "table.section.count") \
X(Table_section_end, "table.section.end") \
X(Table_section_type, "table.section.type") \
X(Table_type, "table_type") \
X(Table_type_begin, "table_type.begin") \
X(Table_type_end, "table_type.end") \
X(Type_num_params, "type.num.params") \
X(Type_num_returns, "type.num.returns") \
X(Type_param, "type.param") \
X(Type_return, "type.return") \
X(Type_section, "type.section") \
X(Type_section_begin, "type.section.begin") \
X(Type_section_count, "type_section.count") \
X(Type_section_end, "type.section.end") \
X(Type_value, "type.value") \
X(Type_value_begin, "type.value.begin") \
X(Type_value_end, "type.value.end") \
X(Nary_inst, "nary.inst") \
X(Postorder_inst, "postorder.inst") \
X(Unknown_body, "unknown_body") \
X(Unknown_section, "unknown.section") \
X(Unknown_section_begin, "unknown.section.begin") \
X(Unknown_section_end, "unknown.section.end")

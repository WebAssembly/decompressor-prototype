# Copyright 2015 WebAssembly Community Group participants
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This file defines the default algorithms for decompressing a WASM
# module, version 0xC.

(section 'filter'
  (version)

  (define 'code' (params)
    (loop (varuint32)            # Number of function bodies.
      (eval 'code.function'))
  )

  (define 'code.address' (params)
    (varuint32)                  # log2 alignment/flags
    (varuint32)                  # offset
  )

  (define 'code.block.sig' (params) (block.begin) (uint8))

  (define 'element' (params)
    (loop (varuint32)            # Number of element segments.
      (eval 'element.segment')
    )
  )

  (define 'code.br_table' (params)
    (loop (varuint32)            # number of targets.
       (varuint32))              # target depth.
    (uint32)                     # default target depth.
  )

  (define 'code.br_target' (params)
     (uint8)                     # br arity.
     (varuint32)                 # relative depth
  )

  (define 'code.function' (params)
    (block  # block implicitly reads bytes using (varuint32) on byte stream.
      (block.begin)
      (loop (varuint32)          # number of locals in function.
        (eval 'code.local'))
      (loop.unbounded
        (eval 'code.opcode')     # reads instruction opcode
        (eval 'code.inst'))      # selects/parses corresponding instruction.
      (if (not (block.empty)) (error))
    )
  )

  (define 'code.inst' (params)
    (switch (read)
      # TODO(kschimpf) build asts based on arity of opcodes?
      (void)                                      # simple one byte opcode.
      # control flow operators.
      (case (u8.const 0x01) (eval 'code.block.sig'))    # block
      (case (u8.const 0x02) (eval 'code.block.sig'))    # loop
      (case (u8.const 0x03) (eval 'code.block.sig'))    # if
      (case (u8.const 0x06) (eval 'code.br_target'))    # br
      (case (u8.const 0x07) (eval 'code.br_target'))    # br_if
      (case (u8.const 0x08) (eval 'code.br_table'))     # br_table
      (case (u8.const 0x0f) (block.end))          # end function, block, loop, if.
      # basic operators
      (case (u8.const 0x10) (varint32))                 # i32.const value
      (case (u8.const 0x11) (varint64))                 # i64.const value
      (case (u8.const 0x12) (uint64))                   # f64.const value
      (case (u8.const 0x13) (uint32))                   # f32.const value
      (case (u8.const 0x14) (varuint32))                # get_local index
      (case (u8.const 0x15) (varuint32))                # set_local index
      (case (u8.const 0x19) (varuint32))                # tree_local index
      (case (u8.const 0x16) (varuint32))                # call index
      (case (u8.const 0x17) (varuint32))                # call_indirect index
      # Memory-related operators
      (case (u8.const 0x20) (eval 'code.address'))      # i32.load8_s address
      (case (u8.const 0x21) (eval 'code.address'))      # i32.load8_u address
      (case (u8.const 0x22) (eval 'code.address'))      # i32.load16_s address
      (case (u8.const 0x23) (eval 'code.address'))      # i32.load16_u address
      (case (u8.const 0x24) (eval 'code.address'))      # i64.load8_s address
      (case (u8.const 0x25) (eval 'code.address'))      # i64.load8_u address
      (case (u8.const 0x26) (eval 'code.address'))      # i64.load16_s address
      (case (u8.const 0x27) (eval 'code.address'))      # i64.load16_u address
      (case (u8.const 0x28) (eval 'code.address'))      # i64.load32_s address
      (case (u8.const 0x29) (eval 'code.address'))      # i64.load32_u address
      (case (u8.const 0x2a) (eval 'code.address'))      # i32.load address
      (case (u8.const 0x2b) (eval 'code.address'))      # i64.load address
      (case (u8.const 0x2c) (eval 'code.address'))      # f32.load address
      (case (u8.const 0x2d) (eval 'code.address'))      # f64.load address
      (case (u8.const 0x2e) (eval 'code.address'))      # i32.store8 address
      (case (u8.const 0x2f) (eval 'code.address'))      # i32.store16 address
      (case (u8.const 0x30) (eval 'code.address'))      # i64.store8 address
      (case (u8.const 0x31) (eval 'code.address'))      # i64.store16 address
      (case (u8.const 0x32) (eval 'code.address'))      # i64.store32 address
      (case (u8.const 0x33) (eval 'code.address'))      # i32.store address
      (case (u8.const 0x34) (eval 'code.address'))      # i64.store address
      (case (u8.const 0x35) (eval 'code.address'))      # f32.store address
      (case (u8.const 0x36) (eval 'code.address'))      # f64.store address
    )
  )

  (define 'code.local' (params)
    (varuint32)                  # number of locals with type
    (uint8)                      # type of locals.
  )

  (define 'code.opcode' (params) (uint8))

  (define 'data' (params)
    (loop (varuint32)          # number of data segments.
      (eval 'data.segment'))
  )

  (define 'data.segment' (params)
    (varuint32)                # The linear memory index.
    (eval 'init_expr')         # an i32 initializer defining offset to place data.
    (loop (varuint32) (uint8)) # The data.
  )

  (define 'element.segment' (params)
    (varuint32)                 # The table index
    (eval 'init_expr')          # An i32 initializer that computess the
                                # placement offset.
    (loop (varuint32)           
      (varuint32))              # Function index.
  )

  (define 'export' (params)
    (loop (varuint32)          # number of exports
      (eval 'export.entry'))
  )

  (define 'export.entry' (params)
    (eval 'export.symbol')     # Exported field name.
    (uint8)                    # Kind of definition being exported.
    (varuint32)                # The index to the corresponding index space.
  )

  (define 'export.symbol' (params) # reads in an exported name
    (loop (varuint32) (uint8))
  )

  (define 'function' (params)
    (loop (varuint32)          # Number of type signatures.
       (varuint32))            # type signature index
  )

  (define 'global' (params)
    (loop (varuint32)            # Number of global variables.
      (uint8)                    # Type of global variable
      (uint8)                    # 0 if immutable, 1 if mutable.
      (eval 'init_expr')         # Initial value if specified.
    )
  )

  (define 'import' (params)
    (loop (varuint32) (eval 'import.entry'))
  )

  (define 'import.entry' (params)
    (varuint32)                    # signature index of the import
    (eval 'name.symbol')           # module name
    (eval 'name.symbol')           # field name
    (switch (uint8)                # Kind of definition.
      (void)                       #   default: no additional data.
      (case (u8.const 0)           #   Function:
        (varuint32))               #     signature index of function.
      (case (u8.const 1)           #   Table:
        (uint8)                    #     0x20, indicating anyfunc.
        (eval 'resizable.limits')) #     Table limits.
      (case (u8.const 3)           #   Global:
        (uint8)                    #     Type of imported global.
        (uint8))                   #     0=immutable, 1=mutable.
    )
  )

  (define 'init_expr' (params)
    (loop.unbounded
      (eval 'code.opcode')      # Opcode of expression.
      # TODO(karlschimpf) Should we just use code.inst?
      (switch (read)
        (error)                 # Only allows explicitly allowed operands.
        (case (u8.const 0x10) (varint32))  # (i32.const N)
        (case (u8.const 0x11) (varint64))  # (i64.const N)
        (case (u8.const 0x12) (uint64))    # (f64.const N)
        (case (u8.const 0x13) (uint32))    # (f32.const N)
        (case (u8.const 0xbb) (varuint32)) # (get_global I)
        # (case (u8.const 0x0f) (end.block)) # end expression. ??
        (case (u8.const 0x0f) (void))        # DELETE THIS.
      )
    )
  )

  (define 'memory' (params)
    (loop (varuint32)            # Number of memory units.
      (eval 'resizable.limits')  # memory unit limits.
    )
  )

  (define 'name' (params)
    (loop (varuint32)        # function name count.
      (eval 'name.function'))
  )

  (define 'name.function' (params)
    (eval 'name.symbol')       # function name
    (loop (varuint32)          # number of local names.
      (eval 'name.symbol'))    # local name
  )

  (define 'name.symbol' (params)
    (loop (varuint32) (uint8))
  )

  (define 'resizable.limits' (params)
    (locals 1)
    (set (local 0) (varuint32)) # flags
    (varuint32)                 # initial length.
    (if (bitwise.and (local 0) (u32.const 0x1))
      (varuint32)               # maximum length.
    )
  )

  (define 'start' (params)
    (varuint32)                # start function index.
  )

  (define 'table' (params)
    (loop (varuint32)           # Number of table entries.
      (uint8)                   # 0x20, indicating anyfunc.
      (eval 'resizable.limits') # Table entry limits.
    )
  ) 

  (define 'type' (params)
    (loop (varuint32)          # number of signatures.
      (uint8)                  # type form (0x040)
      (loop (varuint32)        # number of parameters parameters
        (uint8))               # parameter type.
      (loop (varuint32)        # number of return types.
        (uint8))               # return type.
    )
  )
)

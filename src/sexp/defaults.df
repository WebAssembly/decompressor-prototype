# Copyright 2015 WebAssembly Community Group participants
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This file defines the default algorithms for decompressing a WASM
# module.

# TODO(kschimpf) Generate AST's.

(section 'filter'
  (version 0)

  (default 'code'
    (loop (varuint32 6)          # Number of function bodies.
      (eval 'code.function'))
  )

  (default 'code.address'
    (varuint32 6)                # alignment
    (varuint32 6)                # offset
  )

  (default 'code.br_table'
    (uint8)                      # table arity.
    (loop (varuint32 6)          # number of targets.
       (uint32 6))               # target depth.
    (uint32 6)                   # default target depth.
  )

  (default 'code.br_target'
     (uint8)                     # br arity.
     (varuint32 6)               # relative depth
  )

  (default 'code.call_args'
    (varuint32 6)                # function arity.
    (varuint32 6)                # function index
  )

  (default 'code.function'
    (block
      # block implicitly reads   # bytes using (varuint32) on byte stream.
      (loop (varuint32 6)        # number of locals in function.
        (eval 'code.local'))
      (loop.unbounded
        (eval 'code.opcode')     # reads instruction opcode
        (eval 'code.inst'))      # selects/parses corresponding instruction.
      # Insert 0xFFFFFFFF eob opcode if not byte stream.
      (if (and (is.byte.in) (not (is.byte.out)))
        (map (u32.const 0xffffffff) (uint32)))
    )
  )

  (default 'code.local'
    (varuint32 6)                # number of locals with type
    (uint8 3)                    # type of locals.
  )

  (default 'code.inst'
    (select (read)
      # TODO(kschimpf) build asts based on arity of opcodes?
      (void)                                 # simple one byte opcode.
      # control flow operators.
      (case 0x06 (eval 'code.br_target'))    # br
      (case 0x07 (eval 'code.br_target'))    # br_if
      (case 0x08 (eval 'code.br_table'))     # br_table
      (case 0x09 (uint8))                    # return arity
      # basic operators
      (case 0x10 (varint32 6))               # i32.const value
      (case 0x11 (varint64 6))               # i64.const value
      (case 0x12 (uint64))                   # f64.const value
      (case 0x13 (uint32))                   # f32.const value
      (case 0x14 (varuint32 6))              # get_local index
      (case 0x15 (varuint32 6))              # set_local index
      (case 0x16 (eval 'code.call_args'))    # call
      (case 0x17 (eval 'code.call_args'))    # call_indirect
      (case 0x18 (eval 'code.call_args'))    # call_import
      # Memory-related operators
      (case 0x20 (eval 'code.address'))      # i32.load8_s address
      (case 0x21 (eval 'code.address'))      # i32.load8_u address
      (case 0x22 (eval 'code.address'))      # i32.load16_s address
      (case 0x23 (eval 'code.address'))      # i32.load16_u address
      (case 0x24 (eval 'code.address'))      # i64.load8_s address
      (case 0x25 (eval 'code.address'))      # i64.load8_u address
      (case 0x26 (eval 'code.address'))      # i64.load16_s address
      (case 0x27 (eval 'code.address'))      # i64.load16_u address
      (case 0x28 (eval 'code.address'))      # i64.load32_s address
      (case 0x29 (eval 'code.address'))      # i64.load32_u address
      (case 0x2a (eval 'code.address'))      # i32.load address
      (case 0x2b (eval 'code.address'))      # i64.load address
      (case 0x2c (eval 'code.address'))      # f32.load address
      (case 0x2d (eval 'code.address'))      # f64.load address
      (case 0x2e (eval 'code.address'))      # i32.store8 address
      (case 0x2f (eval 'code.address'))      # i32.store16 address
      (case 0x30 (eval 'code.address'))      # i64.store8 address
      (case 0x31 (eval 'code.address'))      # i64.store16 address
      (case 0x32 (eval 'code.address'))      # i64.store32 address
      (case 0x33 (eval 'code.address'))      # i32.store address
      (case 0x34 (eval 'code.address'))      # i64.store address
      (case 0x35 (eval 'code.address'))      # f32.store address
      (case 0x36 (eval 'code.address'))      # f64.store address
      (case 0xFFFFFFFF (block.end))          # end function block
    )
  )

  (default 'code.opcode'
    # All opcodes single byte except EOB marker 0xFFFFFFFF.
    (opcode (uint8)
      (case 0xFF
        (opcode (uint8)
          (case 0xFF
            (opcode (uint8)
              (case 0xFF (uint8)) 
            )
          )
        )
      )
    )
  )

  (default 'data'
    (loop (varuint32 6)        # number of data segments.
      (eval 'data.segment'))
  )

  (default 'data.segment'
    # The offset in linear memory at which to store the data.
     (varuint32 6)
    # The data
    (loop (varuint32 6) (uint8))
  )

  (default 'export'
    (loop (varuint32 6)        # number of exports
      (eval 'export.entry'))
  )

  (default 'export.entry'
    (varuint32 6)              # function index
    (eval 'export.symbol')     # funtion name
  )

  (default 'export.symbol'     # reads in a function name
    (loop (varuint32 6) (uint8))
  )

  (default 'function'
    (loop (varuint32 6)        # Number of type signatures.
       (varuint32 6))          # type signature index
  )

  (default 'import'
    (loop (varuint32 6) (eval 'import.entry'))
  )

  (default 'import.entry'
    (varuint32 6)              # signature index of the import
    (eval 'import.symbol')     # module name
    (eval 'import.symbol')     # function name
  )

  (default 'import.symbol'
    (loop (varuint32 6) (uint8))
  )

  (default 'memory'
    (varuint32 6)              # Initial memory suze
    (varuint32 6)              # maximum memory size
    (uint8)                    # 1 if the memory is visible outside the module
  )

  (default 'name'
    (loop (varuint32 6)        # function name count.
      (eval 'name.function'))
  )

  (default 'name.function'
    (eval 'name.symbol')       # function name
    (loop (varuint32 6)        # number of local names.
      (eval 'name.symbol'))    # local name
  )

  (default 'name.symbol' # reads in a symbol name
    (loop (varuint32 6) (uint8))
  )

  (default 'start'
    (varuint32 6)              # start function index.
  )

  (default 'table'
    (loop (varuint32 6)        # Number of table entries.
       (varuint32 6))          # function index.
  )

  (default 'type'
    (loop (varuint32 6)        # number of signatures.
      (uint8)                  # type form (0x040)
      (loop (varuint32 6)      # number of parameters parameters
        (uint8))               # parameter type.
      (loop (varuint32 6)      # number of return types.
        (uint8))               # return type.
    )
  )
)

//
// Copyright 2016 WebAssembly Community Group participants
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Defines Opcodes for Ast nodes.

#ifndef DECOMPRESSOR_SRC_AST_DEF
#define DECOMPRESSOR_SRC_AST_DEF

//#define X(tag, opcode, sexp_name, type_name, text_num_args, text_max_args)
// where:
//   tag: enumeration name.
//   opcode: opcode value (also enum value).
//   sexp_name: print name in s-expressions.
//   type_name: type name (use sexp_name if nullptr).
//   text_num_args: Minimum number of arguments to print on same line in
//                  TextWriter.
//   text_max_args: Number of additional arguments (above text_num_args)
//                  that can appear on same line.
#define AST_OPCODE_TABLE                                                       \
  /* enum name, opcode */                                                      \
                                                                               \
  /* Control flow operators */                                                 \
  X(Block,             0x01, "block",            nullptr,           1, 0)      \
  X(Case,              0x02, "case",             nullptr,           2, 0)      \
  X(Error,             0x03, "error",            nullptr,           0, 0)      \
  X(Eval,              0x04, "eval",             nullptr,           1, 1)      \
  X(Loop,              0x07, "loop",             nullptr,           1, 1)      \
  X(LoopUnbounded,     0x08, "loop.unbounded",   nullptr,           0, 1)      \
  X(Switch,            0x09, "switch",           nullptr,           1, 0)      \
  X(Sequence,          0x0a, "seq",              nullptr,           0, 0)      \
  X(IfThen,            0x0b, "if",               "IfThen",          1, 0)      \
  X(IfThenElse,        0x0c, "if",               "IfThenElse",      1, 0)      \
                                                                               \
  /* Constants */                                                              \
  X(Void,              0x10, "void",             nullptr,           0, 0)      \
  X(Symbol,            0x11, "symbol",           nullptr,           0, 0)      \
  X(I32Const,          0x12, "i32.const",        nullptr,           1, 0)      \
  X(I64Const,          0x13, "i64.const",        nullptr,           1, 0)      \
  X(U8Const,           0x14, "u8.const",         nullptr,           1, 0)      \
  X(U32Const,          0x15, "u32.const",        nullptr,           1, 0)      \
  X(U64Const,          0x16, "u64.const",        nullptr,           1, 0)      \
                                                                               \
  /* Formatting */                                                             \
  X(Uint32,            0x21, "uint32",           nullptr,           0, 0)      \
  X(Uint64,            0x23, "uint64",           nullptr,           0, 0)      \
  X(Uint8,             0x25, "uint8",            nullptr,           0, 0)      \
  X(Varint32,          0x27, "varint32",         nullptr,           0, 0)      \
  X(Varint64,          0x29, "varint64",         nullptr,           0, 0)      \
  X(Varuint32,         0x2b, "varuint32",        nullptr,           0, 0)      \
  X(Varuint64,         0x2d, "varuint64",        nullptr,           0, 0)      \
  X(Opcode,            0x2e, "opcode",           nullptr,           0, 0)      \
  X(BinaryAccept,      0x22, "accept",           nullptr,           0, 0)      \
  X(BinarySelect,      0x24, "binary",           nullptr,           0, 0)      \
                                                                               \
  /* Boolean Expressions */                                                    \
  X(And,               0x30, "and",              nullptr,           2, 0)      \
  X(Or,                0x31, "or",               nullptr,           2, 0)      \
  X(Not,               0x32, "not",              nullptr,           1, 0)      \
  X(BitwiseAnd,        0x34, "bitwise.and",      nullptr,           2, 0)      \
  X(BitwiseOr,         0x35, "bitwise.or",       nullptr,           2, 0)      \
  X(BitwiseXor,        0x36, "bitwise.xor",      nullptr,           2, 0)      \
  X(BitwiseNegate,     0x37, "bitwise.negate",   nullptr,           1, 0)      \
  X(LastSymbolIs,      0x38, "last.symbol.is",   nullptr,           1, 0)      \
                                                                               \
  /* I/O operations  */                                                        \
  X(Peek,              0x40, "peek",             nullptr,           1, 0)      \
  X(Read,              0x41, "read",             nullptr,           1, 0)      \
  X(LastRead,          0x42, "read",             "lastRead",        0, 0)      \
  X(Write,             0x43, "write",            nullptr,           1, 1)      \
                                                                               \
  /* Other */                                                                  \
  X(Param,             0x51, "param",            nullptr,           1, 0)      \
  X(Local,             0x53, "local",            nullptr,           1, 0)      \
  X(Set,               0x54, "set",              nullptr,           2, 0)      \
  X(Map,               0x55, "map",              nullptr,           1, 0)      \
  X(Callback,          0x56, "=>",               nullptr,           1, 0)      \
                                                                               \
  /* Declarations */                                                           \
  X(Define,            0x60, "define",           nullptr,           2, 1)      \
  X(File,              0x62, "file",             nullptr,           2, 0)      \
  X(FileHeader,        0x77, "header",           nullptr,           0, 3)      \
  X(Section,           0x63, "section",          nullptr,           1, 0)      \
  X(Undefine,          0x64, "undefine",         nullptr,           1, 0)      \
  X(LiteralDef,        0x65, "literal",          nullptr,           2, 0)      \
  X(Rename,            0x68, "rename",           nullptr,           2, 0)      \
  X(Locals,            0x69, "locals",           nullptr,           1, 0)      \
  X(Params,            0x70, "params",           nullptr,           1, 0)      \
  X(LiteralUse,        0x71, "literal_use",      nullptr,           1, 0)      \
                                                                               \
  /* Internal (not opcodes in compressed file) */                              \
  X(UnknownSection,    0xFF, "unknown.section", nullptr,           1, 0)       \

//#define X(tag, NODE_DECLS)
#define AST_NULLARYNODE_TABLE                                                  \
  X(BinaryAccept,)                                                             \
  X(Error,)                                                                    \
  X(LastRead,)                                                                 \
  X(Uint32,)                                                                   \
  X(Uint64,)                                                                   \
  X(Uint8,)                                                                    \
  X(Varint32,)                                                                 \
  X(Varint64,)                                                                 \
  X(Varuint32,)                                                                \
  X(Varuint64,)                                                                \
  X(Void,)                                                                     \

//#define X(tag, defval, mergable, NODE_DECLS)
// where:
//   tag: enumeration name (less Op prefix).
//   format: Format for printing out value.
//   defval: Default value assumed if not provided.
//   mergable: True if instances can be merged.
//   NODE_DECLS: Other declarations for the node.
#define AST_INTEGERNODE_TABLE                                                  \
  X(I32Const, Varint32, 0, true,)                                              \
  X(I64Const, Varint64, 0, true,)                                              \
  X(Local, Varuint32, 0, true,)                                                \
  X(Locals, Varuint32, 0, true,)                                               \
  X(Param, Varuint32, 0, false, PARAM_DECLS)                                   \
  X(Params, Varuint32, 0, false,)                                              \
  X(U8Const, Uint8, 0, true,)                                                  \
  X(U32Const, Varuint32, 0, true,)                                             \
  X(U64Const, Varuint64, 0, true,)                                             \

#define PARAM_DECLS                                                            \
  public:                                                                      \
    bool validateNode(NodeVectorType &Parents) OVERRIDE;                       \

//#define X(tag, NODE_DECLS)
#define AST_UNARYNODE_TABLE                                                    \
  X(Block,)                                                                    \
  X(BitwiseNegate,)                                                            \
  X(Callback,)                                                                 \
  X(LastSymbolIs,)                                                             \
  X(LoopUnbounded,)                                                            \
  X(Not,)                                                                      \
  X(Peek,)                                                                     \
  X(Read,)                                                                     \
  X(LiteralUse,)                                                               \
  X(Undefine,)                                                                 \
  X(UnknownSection,)                                                           \



//#define X(tag, NODE_DECLS)
#define AST_BINARYNODE_TABLE                                                   \
  X(And,)                                                                      \
  X(BinarySelect,)                                                             \
  X(BitwiseAnd,)                                                               \
  X(BitwiseOr,)                                                                \
  X(BitwiseXor,)                                                               \
  X(Case,)                                                                     \
  X(IfThen,)                                                                   \
  X(Loop,)                                                                     \
  X(Or,)                                                                       \
  X(Rename,)                                                                   \
  X(Set,)                                                                      \
  X(LiteralDef,)                                                               \

//#define X(tag, NODE_DECLS)
#define AST_SELECTNODE_TABLE                                                   \
  X(Switch,)                                                                   \
  X(Map,)                                                                      \

//#define X(tag, NODE_DECLS)
#define AST_NARYNODE_TABLE                                                     \
  X(Define, DEFINE_DECLS)                                                      \
  X(Eval, EVAL_DECLS)                                                          \
  X(FileHeader,)                                                               \
  X(Section, SECTION_DECLS)                                                    \
  X(Sequence,)                                                                 \
  X(Write,)                                                                    \

#define DEFINE_DECLS                                                           \
  bool isValidParam(decode::IntType Index);                                    \
  const std::string getName() const;                                           \
  size_t getNumLocals() const;                                                 \
  Node* getBody() const;                                                       \

#define EVAL_DECLS                                                             \
 public:                                                                       \
  SymbolNode* getCallName() const {                                            \
    return dyn_cast<SymbolNode>(getKid(0));                                    \
  }                                                                            \
  bool validateNode(NodeVectorType &Parents) OVERRIDE;                         \

#define SECTION_DECLS                                                          \
 public:                                                                       \
  SymbolNode* getSymbol() const {                                              \
    return dyn_cast<SymbolNode>(getKid(0));                                    \
  }                                                                            \

//#define X(tag, NODE_DECLS)
#define AST_TERNARYNODE_TABLE                                                  \
  X(File,)                                                                     \
  X(IfThenElse,)                                                               \

//#define X(tag)
#define AST_NODE_HAS_HIDDEN_SEQ                                                \
  X(Block)                                                                     \
  X(Case)                                                                      \
  X(Define)                                                                    \
  X(Loop)                                                                      \
  X(LoopUnbounded)                                                             \
  X(Peek)                                                                      \
  X(Read)                                                                      \

//#define X(tag)
#define AST_NODE_NEVER_SAME_LINE                                               \
  X(Block)                                                                     \
  X(Case)                                                                      \
  X(Define)                                                                    \
  X(FileHeader)                                                                \
  X(IfThen)                                                                    \
  X(IfThenElse)                                                                \
  X(Loop)                                                                      \
  X(LoopUnbounded)                                                             \
  X(Opcode)                                                                    \
  X(Switch)                                                                    \
  X(Map)                                                                       \
  X(Sequence)                                                                  \
  X(Section)                                                                   \
  X(Undefine)                                                                  \
  X(UnknownSection)                                                            \
  X(Write)                                                                     \

#endif // DECOMPRESSOR_SRC_AST_DEF

/*
 * Copyright 2016 WebAssembly Community Group participants
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Defines Opcodes for Ast nodes.

#ifndef DECOMPRESSOR_SRC_AST_DEF
#define DECOMPRESSOR_SRC_AST_DEF

//#define X(tag, opcode, sexp_name, type_name, text_num_args, text_max_args)
// where:
//   tag: enumeration name.
//   opcode: opcode value (also enum value).
//   sexp_name: print name in s-expressions.
//   type_name: type name (use sexp_name if nullptr).
//   text_num_args: Minimum number of arguments to print on same line in
//                  TextWriter.
//   text_max_args: Number of additional arguments (above text_num_args)
//                  that can appear on same line.
#define AST_OPCODE_TABLE                                                       \
  /* enum name, opcode */                                                      \
                                                                               \
  /* Control flow operators */                                                 \
  X(BlockEndNoArgs,    0x00, "block.end",        "BlockEndNoArgs",  0, 0)      \
  X(Block,             0x01, "block",            nullptr,           1, 0)      \
  X(Case,              0x02, "case",             nullptr,           2, 0)      \
  X(Error,             0x03, "error",            nullptr,           0, 0)      \
  X(Eval,              0x04, "eval",             nullptr,           1, 1)      \
  X(Filter,            0x06, "filter",           nullptr,           0, 0)      \
  X(Loop,              0x07, "loop",             nullptr,           1, 1)      \
  X(LoopUnbounded,     0x08, "loop.unbounded",   nullptr,           0, 1)      \
  X(Switch,            0x09, "switch",           nullptr,           1, 0)      \
  X(Sequence,          0x0a, "seq",              nullptr,           0, 0)      \
  X(IfThen,            0x0b, "if",               "IfThen",          1, 0)      \
  X(IfThenElse,        0x0c, "if",               "IfThenElse",      1, 0)      \
                                                                               \
  /* Constants */                                                              \
  X(Void,              0x10, "void",             nullptr,           0, 0)      \
  X(Symbol,            0x11, "symbol",           nullptr,           0, 0)      \
  X(I32Const,          0x12, "i32.const",        nullptr,           0, 0)      \
  X(I64Const,          0x13, "i64.const",        nullptr,           0, 0)      \
  X(U8Const,           0x14, "u8.const",         nullptr,           0, 0)      \
  X(U32Const,          0x15, "u32.const",        nullptr,           0, 0)      \
  X(U64Const,          0x16, "u64.const",        nullptr,           0, 0)      \
                                                                               \
  /* Formatting */                                                             \
  X(Uint32NoArgs,      0x20, "uint32",           "uint32NoArgs",    0, 0)      \
  X(Uint32OneArg,      0x21, "uint32",           "uint32OneArg",    0, 0)      \
  X(Uint64NoArgs,      0x22, "uint64",           "uint64NoArgs",    0, 0)      \
  X(Uint64OneArg,      0x23, "uint64",           "uint64OneArg",    0, 0)      \
  X(Uint8NoArgs,       0x24, "uint8",            "uint8NoArgs",     0, 0)      \
  X(Uint8OneArg,       0x25, "uint8",            "uint8OneArg",     0, 0)      \
  X(Varint32NoArgs,    0x26, "varint32",         "varint32NoArgs",  0, 0)      \
  X(Varint32OneArg,    0x27, "varint32",         "varint32OneArg",  0, 0)      \
  X(Varint64NoArgs,    0x28, "varint64",         "varint64NoArgs",  0, 0)      \
  X(Varint64OneArg,    0x29, "varint64",         "varint64OneArg",  0, 0)      \
  X(Varuint32NoArgs,   0x2a, "varuint32",        "varuint32NoArgs", 0, 0)      \
  X(Varuint32OneArg,   0x2b, "varuint32",        "varuint32OneArg", 0, 0)      \
  X(Varuint64NoArgs,   0x2c, "varuint64",        "varuint64NoArgs", 0, 0)      \
  X(Varuint64OneArg,   0x2d, "varuint64",        "varuint64OneArg", 0, 0)      \
  X(Opcode,            0x2e, "opcode",           nullptr,           1, 0)      \
                                                                               \
  /* Boolean tests */                                                          \
  X(And,               0x30, "and",              nullptr,           2, 0)      \
  X(Or,                0x31, "or",               nullptr,           2, 0)      \
  X(Not,               0x32, "not",              nullptr,           1, 0)      \
  X(Stream,            0x33, "stream",           nullptr,           0, 0)      \
                                                                               \
  X(Map,               0x39, "map",              nullptr,           1, 0)      \
                                                                               \
  /* I/O (and tree) operations  */                                             \
  X(Peek,              0x40, "peek",             nullptr,           1, 0)      \
  X(Read,              0x41, "read",             nullptr,           1, 0)      \
  X(LastRead,          0x42, "read",             "lastRead",        0, 0)      \
  X(Write,             0x43, "write",            nullptr,           2, 0)      \
                                                                               \
  /* Other exprressions */                                                     \
  X(Convert,           0x50, "convert",          nullptr,           2, 1)      \
  X(Param,             0x51, "param",            nullptr,           0, 0)      \
                                                                               \
  /* Declarations */                                                           \
  X(Define,            0x60, "define",           nullptr,           2, 1)      \
  X(File,              0x62, "file",             nullptr,           0, 0)      \
  X(Section,           0x63, "section",          nullptr,           1, 0)      \
  X(Undefine,          0x64, "undefine",         nullptr,           1, 0)      \
  X(Version,           0x65, "version",          nullptr,           0, 0)      \
  X(Rename,            0x66, "rename",           nullptr,           2, 0)      \
                                                                               \
  /* Internal (not opcodes in compressed file) */                              \
  X(UnknownSection,    0xFF, "unknown.section", nullptr,           1, 0)       \

//#define X(tag)
#define AST_NULLARYNODE_TABLE                                                  \
  X(BlockEndNoArgs)                                                            \
  X(Error)                                                                     \
  X(LastRead)                                                                \
  X(Uint8NoArgs)                                                               \
  X(Uint32NoArgs)                                                              \
  X(Uint64NoArgs)                                                              \
  X(Varint32NoArgs)                                                            \
  X(Varint64NoArgs)                                                            \
  X(Varuint32NoArgs)                                                           \
  X(Varuint64NoArgs)                                                           \
  X(Void)                                                                      \

//#define X(tag)
#define AST_INTEGERNODE_TABLE                                                  \
  X(I32Const)                                                                  \
  X(I64Const)                                                                  \
  X(Param)                                                                     \
  X(U8Const)                                                                   \
  X(U32Const)                                                                  \
  X(U64Const)                                                                  \
  X(Uint32OneArg)                                                              \
  X(Uint64OneArg)                                                              \
  X(Uint8OneArg)                                                               \
  X(Varint32OneArg)                                                            \
  X(Varint64OneArg)                                                            \
  X(Varuint32OneArg)                                                           \
  X(Varuint64OneArg)                                                           \
  X(Version)                                                                   \

//#define X(tag)
#define AST_UNARYNODE_TABLE                                                    \
  X(Block)                                                                     \
  X(LoopUnbounded)                                                             \
  X(Not)                                                                       \
  X(Peek)                                                                      \
  X(Read)                                                                      \
  X(Undefine)                                                                  \
  X(UnknownSection)                                                            \

//#define X(tag)
#define AST_BINARYNODE_TABLE                                                   \
  X(And)                                                                       \
  X(Case)                                                                      \
  X(IfThen)                                                                    \
  X(Loop)                                                                      \
  X(Or)                                                                        \
  X(Rename)                                                                    \
  X(Write)                                                                     \

//#define X(tag)
#define AST_SELECTNODE_TABLE                                                   \
  X(Switch)                                                                    \
  X(Map)                                                                       \

//#define X(tag)
#define AST_NARYNODE_TABLE                                                     \
  X(File)                                                                      \
  X(Filter)                                                                    \
  X(Eval)                                                                      \
  X(Section)                                                                   \
  X(Sequence)                                                                  \

//#define X(tag)
#define AST_TERNARYNODE_TABLE                                                  \
  X(Convert)                                                                   \
  X(Define)                                                                    \
  X(IfThenElse)                                                                \

//#define X(tag)
#define AST_NODE_HAS_HIDDEN_SEQ                                                \
  X(Block)                                                                     \
  X(Case)                                                                      \
  X(Convert)                                                                   \
  X(Define)                                                                    \
  X(Loop)                                                                      \
  X(LoopUnbounded)                                                             \

//#define X(tag)
#define AST_NODE_NEVER_SAME_LINE                                               \
  X(Block)                                                                     \
  X(Case)                                                                      \
  X(Define)                                                                    \
  X(IfThen)                                                                    \
  X(IfThenElse)                                                                \
  X(Loop)                                                                      \
  X(LoopUnbounded)                                                             \
  X(Opcode)                                                                    \
  X(Switch)                                                                    \
  X(Map)                                                                       \
  X(Sequence)                                                                  \
  X(Section)                                                                   \
  X(Undefine)                                                                  \
  X(UnknownSection)                                                            \

#endif // DECOMPRESSOR_SRC_AST_DEF

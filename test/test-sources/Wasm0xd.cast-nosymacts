(header (u32.const 0x6d736163) (u32.const 0x0))
(header.read (u32.const 0x6d736100) (u32.const 0xd))
(literal 'inst.unreachable' (u8.const 0x0))
(literal 'inst.nop' (u8.const 0x1))
(literal 'inst.block' (u8.const 0x2))
(literal 'inst.loop' (u8.const 0x3))
(literal 'inst.if' (u8.const 0x4))
(literal 'inst.else' (u8.const 0x5))
(literal 'inst.end' (u8.const 0xb))
(literal 'inst.br' (u8.const 0xc))
(literal 'inst.br_if' (u8.const 0xd))
(literal 'inst.br_table' (u8.const 0xe))
(literal 'inst.return' (u8.const 0xf))
(literal 'inst.call' (u8.const 0x10))
(literal 'inst.call_indirect' (u8.const 0x11))
(literal 'inst.drop' (u8.const 0x1a))
(literal 'inst.select' (u8.const 0x1b))
(literal 'inst.get_local' (u8.const 0x20))
(literal 'inst.set_local' (u8.const 0x21))
(literal 'inst.tee_local' (u8.const 0x22))
(literal 'inst.get_global' (u8.const 0x23))
(literal 'inst.set_global' (u8.const 0x24))
(literal 'inst.i32.load' (u8.const 0x28))
(literal 'inst.i64.load' (u8.const 0x29))
(literal 'inst.f32.load' (u8.const 0x2a))
(literal 'inst.f64.load' (u8.const 0x2b))
(literal 'inst.i32.load8_s' (u8.const 0x2c))
(literal 'inst.i32.load8_u' (u8.const 0x2d))
(literal 'inst.i32.load16_s' (u8.const 0x2e))
(literal 'inst.i32.load16_u' (u8.const 0x2f))
(literal 'inst.i64.load8_s' (u8.const 0x30))
(literal 'inst.i64.load8_u' (u8.const 0x31))
(literal 'inst.i64.load16_s' (u8.const 0x32))
(literal 'inst.i64.load16_u' (u8.const 0x33))
(literal 'inst.i64.load32_s' (u8.const 0x34))
(literal 'inst.i64.load32_u' (u8.const 0x35))
(literal 'inst.i32.store' (u8.const 0x36))
(literal 'inst.i64.store' (u8.const 0x37))
(literal 'inst.f32.store' (u8.const 0x38))
(literal 'inst.f64.store' (u8.const 0x39))
(literal 'inst.i32.store8' (u8.const 0x3a))
(literal 'inst.i32.store16' (u8.const 0x3b))
(literal 'inst.i64.store8' (u8.const 0x3c))
(literal 'inst.i64.store16' (u8.const 0x3d))
(literal 'inst.i64.store32' (u8.const 0x3e))
(literal 'inst.current_memory' (u8.const 0x3f))
(literal 'inst.grow_memory' (u8.const 0x40))
(literal 'inst.i32.const' (u8.const 0x41))
(literal 'inst.i64.const' (u8.const 0x42))
(literal 'inst.f32.const' (u8.const 0x43))
(literal 'inst.f64.const' (u8.const 0x44))
(literal 'inst.i32.eqz' (u8.const 0x45))
(literal 'inst.i32.eq' (u8.const 0x46))
(literal 'inst.i32.ne' (u8.const 0x47))
(literal 'inst.i32.lt_s' (u8.const 0x48))
(literal 'inst.i32.lt_u' (u8.const 0x49))
(literal 'inst.i32.gt_s' (u8.const 0x4a))
(literal 'inst.i32.gt_u' (u8.const 0x4b))
(literal 'inst.i32.le_s' (u8.const 0x4c))
(literal 'inst.i32.le_u' (u8.const 0x4d))
(literal 'inst.i32.ge_s' (u8.const 0x4e))
(literal 'inst.i32.ge_u' (u8.const 0x4f))
(literal 'inst.i64.eqz' (u8.const 0x50))
(literal 'inst.i64.eq' (u8.const 0x51))
(literal 'inst.i64.ne' (u8.const 0x52))
(literal 'inst.i64.lt_s' (u8.const 0x53))
(literal 'inst.i64.lt_u' (u8.const 0x54))
(literal 'inst.i64.gt_s' (u8.const 0x55))
(literal 'inst.i64.gt_u' (u8.const 0x56))
(literal 'inst.i64.le_s' (u8.const 0x57))
(literal 'inst.i64.le_u' (u8.const 0x58))
(literal 'inst.i64.ge_s' (u8.const 0x59))
(literal 'inst.i64.ge_u' (u8.const 0x5a))
(literal 'inst.f32.eq' (u8.const 0x5b))
(literal 'inst.f32.ne' (u8.const 0x5c))
(literal 'inst.f32.lt' (u8.const 0x5d))
(literal 'inst.f32.gt' (u8.const 0x5e))
(literal 'inst.f32.le' (u8.const 0x5f))
(literal 'inst.f32.ge' (u8.const 0x60))
(literal 'inst.f64.eq' (u8.const 0x61))
(literal 'inst.f64.ne' (u8.const 0x62))
(literal 'inst.f64.lt' (u8.const 0x63))
(literal 'inst.f64.gt' (u8.const 0x64))
(literal 'inst.f64.le' (u8.const 0x65))
(literal 'inst.f64.ge' (u8.const 0x66))
(literal 'inst.i32.clz' (u8.const 0x67))
(literal 'inst.i32.ctx' (u8.const 0x68))
(literal 'inst.i32.popcnt' (u8.const 0x69))
(literal 'inst.i32.add' (u8.const 0x6a))
(literal 'inst.i32.sub' (u8.const 0x6b))
(literal 'inst.i32.mul' (u8.const 0x6c))
(literal 'inst.i32.div_s' (u8.const 0x6d))
(literal 'inst.i32.div_u' (u8.const 0x6e))
(literal 'inst.i32.rem_s' (u8.const 0x6f))
(literal 'inst.i32.rem_u' (u8.const 0x70))
(literal 'inst.i32.and' (u8.const 0x71))
(literal 'inst.i32.or' (u8.const 0x72))
(literal 'inst.i32.xor' (u8.const 0x73))
(literal 'inst.i32.shl' (u8.const 0x74))
(literal 'inst.i32.shr_s' (u8.const 0x75))
(literal 'inst.i32.shr_u' (u8.const 0x76))
(literal 'inst.i32.rotl' (u8.const 0x77))
(literal 'inst.i32.rotr' (u8.const 0x78))
(literal 'inst.i64.clz' (u8.const 0x79))
(literal 'inst.i64.ctx' (u8.const 0x7a))
(literal 'inst.i64.popcnt' (u8.const 0x7b))
(literal 'inst.i64.add' (u8.const 0x7c))
(literal 'inst.i64.sub' (u8.const 0x7d))
(literal 'inst.i64.mul' (u8.const 0x7e))
(literal 'inst.i64.div_s' (u8.const 0x7f))
(literal 'inst.i64.div_u' (u8.const 0x80))
(literal 'inst.i64.rem_s' (u8.const 0x81))
(literal 'inst.i64.rem_u' (u8.const 0x82))
(literal 'inst.i64.and' (u8.const 0x83))
(literal 'inst.i64.or' (u8.const 0x84))
(literal 'inst.i64.xor' (u8.const 0x85))
(literal 'inst.i64.shl' (u8.const 0x86))
(literal 'inst.i64.shr_s' (u8.const 0x87))
(literal 'inst.i64.shr_u' (u8.const 0x88))
(literal 'inst.i64.rotl' (u8.const 0x89))
(literal 'inst.i64.rotr' (u8.const 0x8a))
(literal 'inst.f32.abs' (u8.const 0x8b))
(literal 'inst.f32.neg' (u8.const 0x8c))
(literal 'inst.f32.ceil' (u8.const 0x8d))
(literal 'inst.f32.floor' (u8.const 0x8e))
(literal 'inst.f32.trunc' (u8.const 0x8f))
(literal 'inst.f32.nearest' (u8.const 0x90))
(literal 'inst.f32.sqrt' (u8.const 0x91))
(literal 'inst.f32.add' (u8.const 0x92))
(literal 'inst.f32.sub' (u8.const 0x93))
(literal 'inst.f32.mul' (u8.const 0x94))
(literal 'inst.f32.div' (u8.const 0x95))
(literal 'inst.f32.min' (u8.const 0x96))
(literal 'inst.f32.max' (u8.const 0x97))
(literal 'inst.f32.copysign' (u8.const 0x98))
(literal 'inst.f64.abs' (u8.const 0x99))
(literal 'inst.f64.neg' (u8.const 0x9a))
(literal 'inst.f64.ceil' (u8.const 0x9b))
(literal 'inst.f64.floor' (u8.const 0x9c))
(literal 'inst.f64.trunc' (u8.const 0x9d))
(literal 'inst.f64.nearest' (u8.const 0x9e))
(literal 'inst.f64.sqrt' (u8.const 0x9f))
(literal 'inst.f64.add' (u8.const 0xa0))
(literal 'inst.f64.sub' (u8.const 0xa1))
(literal 'inst.f64.mul' (u8.const 0xa2))
(literal 'inst.f64.div' (u8.const 0xa3))
(literal 'inst.f64.min' (u8.const 0xa4))
(literal 'inst.f64.max' (u8.const 0xa5))
(literal 'inst.f64.copysign' (u8.const 0xa6))
(literal 'inst.i32.wrap/i64' (u8.const 0xa7))
(literal 'inst.i32.trunc_s/f32' (u8.const 0xa8))
(literal 'inst.i32.trunc_u/f32' (u8.const 0xa9))
(literal 'inst.i32.trunc_s/f64' (u8.const 0xaa))
(literal 'inst.i32.trunc_u/f64' (u8.const 0xab))
(literal 'inst.i64.extend_s/i32' (u8.const 0xac))
(literal 'inst.i64.extend_u/i32' (u8.const 0xad))
(literal 'inst.i64.trunc_s/f32' (u8.const 0xae))
(literal 'inst.i64.trunc_u/f32' (u8.const 0xaf))
(literal 'inst.i64.trunc_s/f64' (u8.const 0xb0))
(literal 'inst.i64.trunc_u/f64' (u8.const 0xb1))
(literal 'inst.f32.convert_s/i32' (u8.const 0xb2))
(literal 'inst.f32.convert_u/i32' (u8.const 0xb3))
(literal 'inst.f32.convert_s/i64' (u8.const 0xb4))
(literal 'inst.f32.convert_u/i64' (u8.const 0xb5))
(literal 'inst.f32.demote/f64' (u8.const 0xb6))
(literal 'inst.f64.convert_s/i32' (u8.const 0xb7))
(literal 'inst.f64.convert_u/i32' (u8.const 0xb8))
(literal 'inst.f64.convert_s/i64' (u8.const 0xb9))
(literal 'inst.f64.convert_u/i64' (u8.const 0xba))
(literal 'inst.f64.promote/f32' (u8.const 0xbb))
(literal 'inst.i32.reinterpret/f32' (u8.const 0xbc))
(literal 'inst.i64.reinterpret/f64' (u8.const 0xbd))
(literal 'inst.f32.reinterpret/i32' (u8.const 0xbe))
(literal 'inst.f64.reinterpret/i64' (u8.const 0xbf))
(literal 'unknown.section' (u32.const 0))
(literal 'type.section' (u32.const 1))
(literal 'import.section' (u32.const 2))
(literal 'function.section' (u32.const 3))
(literal 'table.section' (u32.const 4))
(literal 'memory.section' (u32.const 5))
(literal 'global.section' (u32.const 6))
(literal 'export.section' (u32.const 7))
(literal 'start.section' (u32.const 8))
(literal 'element.section' (u32.const 9))
(literal 'code.section' (u32.const 10))
(literal 'data.section' (u32.const 11))
(literal 'external.kind.function' (u8.const 0))
(literal 'external.kind.table' (u8.const 1))
(literal 'external.kind.memory' (u8.const 2))
(literal 'external.kind.global' (u8.const 3))
(literal 'br_table.begin' (u32.const 10))
(literal 'br_table.count' (u32.const 11))
(literal 'br_table.default' (u32.const 12))
(literal 'br_table.end' (u32.const 13))
(literal 'br_table.target' (u32.const 14))
(literal 'br_target.begin' (u32.const 15))
(literal 'br_target.end' (u32.const 16))
(literal 'code.section.begin' (u32.const 17))
(literal 'code.section.count' (u32.const 18))
(literal 'code.section.end' (u32.const 19))
(literal 'data.section.begin' (u32.const 20))
(literal 'data.section.count' (u32.const 21))
(literal 'data.section.end' (u32.const 22))
(literal 'data.segment.begin' (u32.const 23))
(literal 'data.segment.memory_index' (u32.const 24))
(literal 'data.segment.size' (u32.const 25))
(literal 'data.segment.data' (u32.const 26))
(literal 'data.segment.end' (u32.const 27))
(literal 'element.section.begin' (u32.const 28))
(literal 'element.section.count' (u32.const 29))
(literal 'element.section.end' (u32.const 30))
(literal 'element.segment.begin' (u32.const 31))
(literal 'element.segment.index' (u32.const 32))
(literal 'element.segment.offset' (u32.const 33))
(literal 'element.segment.num_elem' (u32.const 34))
(literal 'element.segment.elem' (u32.const 35))
(literal 'element.segment.end' (u32.const 36))
(literal 'export.section.begin' (u32.const 37))
(literal 'export.section.count' (u32.const 38))
(literal 'export.section.end' (u32.const 39))
(literal 'export.entry.name' (u32.const 40))
(literal 'export.entry.index' (u32.const 41))
(literal 'external.kind.begin' (u32.const 42))
(literal 'external.kind.end' (u32.const 43))
(literal 'file.begin' (u32.const 44))
(literal 'file.end' (u32.const 45))
(literal 'function.section.begin' (u32.const 46))
(literal 'function.section.count' (u32.const 47))
(literal 'function.section.type' (u32.const 48))
(literal 'function.section.end' (u32.const 49))
(literal 'function.names.begin' (u32.const 50))
(literal 'function.names.fcn_name' (u32.const 51))
(literal 'function.names.local_count' (u32.const 52))
(literal 'function.names.local_name' (u32.const 53))
(literal 'function.names.end' (u32.const 54))
(literal 'function.type.begin' (u32.const 55))
(literal 'function.type.form' (u32.const 56))
(literal 'type.num.params' (u32.const 57))
(literal 'type.param' (u32.const 58))
(literal 'type.num.returns' (u32.const 59))
(literal 'type.return' (u32.const 60))
(literal 'function.type.end' (u32.const 61))
(literal 'function.body.begin' (u32.const 62))
(literal 'function.body.local_count' (u32.const 63))
(literal 'function.body.code.begin' (u32.const 64))
(literal 'function.body.code.end' (u32.const 65))
(literal 'function.body.end' (u32.const 66))
(literal 'global.section.begin' (u32.const 67))
(literal 'global.section.count' (u32.const 68))
(literal 'global.section.variable.type' (u32.const 69))
(literal 'global.section.variable.init' (u32.const 70))
(literal 'global.section.end' (u32.const 71))
(literal 'global.type.begin' (u32.const 72))
(literal 'global.type.end' (u32.const 73))
(literal 'import.section.begin' (u32.const 74))
(literal 'import.section.count' (u32.const 75))
(literal 'import.section.end' (u32.const 76))
(literal 'import.entry.begin' (u32.const 77))
(literal 'import.entry.module' (u32.const 78))
(literal 'import.entry.field' (u32.const 79))
(literal 'import.entry.function' (u32.const 80))
(literal 'import.entry.table' (u32.const 81))
(literal 'import.entry.memory' (u32.const 82))
(literal 'import.entry.global' (u32.const 83))
(literal 'import.entry.end' (u32.const 84))
(literal 'init_expr.begin' (u32.const 85))
(literal 'init_expr.opcode' (u32.const 86))
(literal 'init_expr.end' (u32.const 87))
(literal 'instruction.opcode' (u32.const 88))
(literal 'instruction.end' (u32.const 89))
(literal 'local.entry' (u32.const 90))
(literal 'local.entry.begin' (u32.const 91))
(literal 'local.entry.count' (u32.const 92))
(literal 'local.entry.end' (u32.const 93))
(literal 'memory.section.begin' (u32.const 94))
(literal 'memory.section.count' (u32.const 95))
(literal 'memory.section.entry' (u32.const 96))
(literal 'memory.section.end' (u32.const 97))
(literal 'memory.immediate.begin' (u32.const 98))
(literal 'memory.immediate.end' (u32.const 99))
(literal 'name.section.begin' (u32.const 100))
(literal 'name.section.count' (u32.const 101))
(literal 'name.section.end' (u32.const 102))
(literal 'memory.type.begin' (u32.const 103))
(literal 'memory.type.end' (u32.const 104))
(literal 'resizable.limits.begin' (u32.const 105))
(literal 'resizable.limits.flags' (u32.const 106))
(literal 'resizable.limits.initial' (u32.const 107))
(literal 'resizable.limits.maximum' (u32.const 108))
(literal 'resizable.limits.end' (u32.const 109))
(literal 'section.begin' (u32.const 110))
(literal 'section.code' (u32.const 111))
(literal 'section.end' (u32.const 112))
(literal 'skip.section.begin' (u32.const 113))
(literal 'skip.section.end' (u32.const 114))
(literal 'start.section.begin' (u32.const 115))
(literal 'start.section.end' (u32.const 116))
(literal 'symbol.name.length' (u32.const 117))
(literal 'symbol.name.begin' (u32.const 118))
(literal 'symbol.name.end' (u32.const 119))
(literal 'table.section.begin' (u32.const 120))
(literal 'table.section.count' (u32.const 121))
(literal 'table.section.type' (u32.const 122))
(literal 'table.section.end' (u32.const 123))
(literal 'table.type.begin' (u32.const 124))
(literal 'table.type.end' (u32.const 125))
(literal 'type.section.begin' (u32.const 126))
(literal 'type.section.end' (u32.const 127))
(literal 'type.section.count' (u32.const 128))
(literal 'type.value.begin' (u32.const 129))
(literal 'type.value.end' (u32.const 130))
(literal 'unknown.section.begin' (u32.const 131))
(literal 'unknown.section.end' (u32.const 132))
(literal 'instruction.begin' (u32.const 133))
(define 'br_table'
  (=> (u64.const 1001))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1002))
    )
    (varuint32)
    (=> (u64.const 1005))
  )
  (varuint32)
  (=> (u64.const 1003))
  (=> (u64.const 1004))
)
(define 'br_target'
  (=> (u64.const 1006))
  (varuint32)
  (=> (u64.const 1007))
)
(define 'code.section'
  (=> (u64.const 1008))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1009))
    )
    (eval 'function.body')
  )
  (=> (u64.const 1010))
)
(define 'data.section'
  (=> (u64.const 1011))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1012))
    )
    (eval 'data.segment')
  )
  (=> (u64.const 1013))
)
(define 'data.segment'
  (=> (u64.const 1014))
  (varuint32)
  (=> (u64.const 1017))
  (eval 'init_expr')
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1018))
    )
    (uint8)
    (=> (u64.const 1015))
  )
  (=> (u64.const 1016))
)
(define 'element.section'
  (=> (u64.const 1019))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1020))
    )
    (eval 'element.segment')
  )
  (=> (u64.const 1021))
)
(define 'element.segment'
  (=> (u64.const 1022))
  (varuint32)
  (=> (u64.const 1025))
  (eval 'init_expr')
  (=> (u64.const 1027))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1026))
    )
    (varuint32)
    (=> (u64.const 1023))
  )
  (=> (u64.const 1024))
)
(define 'export.section'
  (=> (u64.const 1030))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1031))
    )
    (eval 'export.entry')
  )
  (=> (u64.const 1032))
)
(define 'export.entry'
  (eval 'symbol.name')
  (=> (u64.const 1029))
  (eval 'external.kind')
  (varuint32)
  (=> (u64.const 1028))
)
(define 'external.kind'
  (=> (u64.const 1033))
  (uint8)
  (=> (u64.const 1034))
)
(define 'file'
  (=> (u64.const 1035))
  (loop.unbounded (eval 'section'))
  (=> (u64.const 1036))
)
(define 'function.section'
  (=> (u64.const 1047))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1048))
    )
    (varuint32)
    (=> (u64.const 1050))
  )
  (=> (u64.const 1049))
)
(define 'function.names'
  (=> (u64.const 1042))
  (eval 'symbol.name')
  (=> (u64.const 1044))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1045))
    )
    (eval 'symbol.name')
    (=> (u64.const 1046))
  )
  (=> (u64.const 1043))
)
(define 'function.type'
  (=> (u64.const 1051))
  (varint32)
  (=> (u64.const 1053))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1285))
    )
    (eval 'type.value')
    (=> (u64.const 1287))
  )
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1286))
    )
    (eval 'type.value')
    (=> (u64.const 1288))
  )
  (=> (u64.const 1052))
)
(define 'function.body'
  (=> (u64.const 1037))
  (block
    (loop
      (seq
        (varuint32)
        (=> (u64.const 1041))
      )
      (eval 'local.entry')
    )
    (=> (u64.const 1038))
    (loop.unbounded
      (eval 'instruction.opcode')
      (eval 'instruction')
    )
    (=> (u64.const 1039))
  )
  (=> (u64.const 1040))
)
(define 'global.section'
  (=> (u64.const 1054))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1055))
    )
    (eval 'global.type')
    (=> (u64.const 1058))
    (eval 'init_expr')
    (=> (u64.const 1057))
  )
  (=> (u64.const 1056))
)
(define 'global.type'
  (=> (u64.const 1059))
  (eval 'type.value')
  (uint8)
  (=> (u64.const 1060))
)
(define 'import.section'
  (=> (u64.const 1069))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1070))
    )
    (eval 'import.entry')
  )
  (=> (u64.const 1071))
)
(define 'import.entry'
  (=> (u64.const 1061))
  (eval 'symbol.name')
  (=> (u64.const 1067))
  (eval 'symbol.name')
  (=> (u64.const 1063))
  (switch (eval 'external.kind')
    (error)
    (case 'external.kind.function'
      (varuint32)
      (=> (u64.const 1064))
    )
    (case 'external.kind.table'
      (eval 'table.type')
      (=> (u64.const 1068))
    )
    (case 'external.kind.memory'
      (eval 'memory.type')
      (=> (u64.const 1066))
    )
    (case 'external.kind.global'
      (eval 'global.type')
      (=> (u64.const 1065))
    )
  )
  (=> (u64.const 1062))
)
(define 'init_expr' (locals 1)
  (=> (u64.const 1072))
  (set (local 0) (u32.const 1))
  (eval 'instruction.opcode')
  (switch
    (seq
      (read)
      (=> (u64.const 1074))
    )
    (error)
    (case 'inst.i32.const'
      (varint32)
      (=> (u64.const 1150))
    )
    (case 'inst.i64.const'
      (varint64)
      (=> (u64.const 1194))
    )
    (case 'inst.f32.const'
      (uint32)
      (=> (u64.const 1088))
    )
    (case 'inst.f64.const'
      (uint64)
      (=> (u64.const 1117))
    )
    (case 'inst.get_global'
      (varuint32)
      (=> (u64.const 1143))
    )
    (case 'inst.end'
      (=> (u64.const 1084))
      (set (local 0) (u32.const 0))
    )
  )
  (if (local 0)
    (switch (eval 'instruction.opcode')
      (error)
      (case 'inst.end' (=> (u64.const 1084)))
    )
  )
  (=> (u64.const 1073))
)
(define 'instruction'
  (=> (u64.const 1247))
  (switch
    (seq
      (read)
      (=> (u64.const 1249))
    )
    (error)
    (case 'inst.unreachable' (=> (u64.const 1246)))
    (case 'inst.nop' (=> (u64.const 1240)))
    (case 'inst.block'
      (eval 'type.value')
      (=> (u64.const 1075))
    )
    (case 'inst.loop'
      (eval 'type.value')
      (=> (u64.const 1239))
    )
    (case 'inst.if'
      (eval 'type.value')
      (=> (u64.const 1146))
    )
    (case 'inst.else' (=> (u64.const 1083)))
    (case 'inst.end' (=> (u64.const 1084)))
    (case 'inst.br'
      (eval 'br_target')
      (=> (u64.const 1076))
    )
    (case 'inst.br_if'
      (eval 'br_target')
      (=> (u64.const 1077))
    )
    (case 'inst.br_table'
      (eval 'br_table')
      (=> (u64.const 1078))
    )
    (case 'inst.return' (=> (u64.const 1241)))
    (case 'inst.call'
      (varuint32)
      (=> (u64.const 1079))
    )
    (case 'inst.call_indirect'
      (varuint32)
      (varuint32)
      (=> (u64.const 1080))
    )
    (case 'inst.drop' (=> (u64.const 1082)))
    (case 'inst.select' (=> (u64.const 1242)))
    (case 'inst.get_local'
      (varuint32)
      (=> (u64.const 1144))
    )
    (case 'inst.set_local'
      (varuint32)
      (=> (u64.const 1244))
    )
    (case 'inst.tee_local'
      (varuint32)
      (=> (u64.const 1245))
    )
    (case 'inst.get_global'
      (varuint32)
      (=> (u64.const 1143))
    )
    (case 'inst.set_global'
      (varuint32)
      (=> (u64.const 1243))
    )
    (case 'inst.i32.load'
      (eval 'memory.immediate')
      (=> (u64.const 1162))
    )
    (case 'inst.i64.load'
      (eval 'memory.immediate')
      (=> (u64.const 1208))
    )
    (case 'inst.f32.load'
      (eval 'memory.immediate')
      (=> (u64.const 1101))
    )
    (case 'inst.f64.load'
      (eval 'memory.immediate')
      (=> (u64.const 1129))
    )
    (case 'inst.i32.load8_s'
      (eval 'memory.immediate')
      (=> (u64.const 1165))
    )
    (case 'inst.i32.load8_u'
      (eval 'memory.immediate')
      (=> (u64.const 1166))
    )
    (case 'inst.i32.load16_s'
      (eval 'memory.immediate')
      (=> (u64.const 1163))
    )
    (case 'inst.i32.load16_u'
      (eval 'memory.immediate')
      (=> (u64.const 1164))
    )
    (case 'inst.i64.load8_s'
      (eval 'memory.immediate')
      (=> (u64.const 1213))
    )
    (case 'inst.i64.load8_u'
      (eval 'memory.immediate')
      (=> (u64.const 1214))
    )
    (case 'inst.i64.load16_s'
      (eval 'memory.immediate')
      (=> (u64.const 1209))
    )
    (case 'inst.i64.load16_u'
      (eval 'memory.immediate')
      (=> (u64.const 1210))
    )
    (case 'inst.i64.load32_s'
      (eval 'memory.immediate')
      (=> (u64.const 1211))
    )
    (case 'inst.i64.load32_u'
      (eval 'memory.immediate')
      (=> (u64.const 1212))
    )
    (case 'inst.i32.store'
      (eval 'memory.immediate')
      (=> (u64.const 1181))
    )
    (case 'inst.i64.store'
      (eval 'memory.immediate')
      (=> (u64.const 1226))
    )
    (case 'inst.f32.store'
      (eval 'memory.immediate')
      (=> (u64.const 1111))
    )
    (case 'inst.f64.store'
      (eval 'memory.immediate')
      (=> (u64.const 1140))
    )
    (case 'inst.i32.store8'
      (eval 'memory.immediate')
      (=> (u64.const 1183))
    )
    (case 'inst.i32.store16'
      (eval 'memory.immediate')
      (=> (u64.const 1182))
    )
    (case 'inst.i64.store8'
      (eval 'memory.immediate')
      (=> (u64.const 1227))
    )
    (case 'inst.i64.store16'
      (eval 'memory.immediate')
      (=> (u64.const 1228))
    )
    (case 'inst.i64.store32'
      (eval 'memory.immediate')
      (=> (u64.const 1229))
    )
    (case 'inst.current_memory'
      (varuint32)
      (=> (u64.const 1081))
    )
    (case 'inst.grow_memory'
      (varuint32)
      (=> (u64.const 1145))
    )
    (case 'inst.i32.const'
      (varint32)
      (=> (u64.const 1150))
    )
    (case 'inst.i64.const'
      (varint64)
      (=> (u64.const 1194))
    )
    (case 'inst.f32.const'
      (uint32)
      (=> (u64.const 1088))
    )
    (case 'inst.f64.const'
      (uint64)
      (=> (u64.const 1117))
    )
    (case 'inst.i32.eqz' (=> (u64.const 1155)))
    (case 'inst.i32.eq' (=> (u64.const 1154)))
    (case 'inst.i32.ne' (=> (u64.const 1170)))
    (case 'inst.i32.lt_s' (=> (u64.const 1167)))
    (case 'inst.i32.lt_u' (=> (u64.const 1168)))
    (case 'inst.i32.gt_s' (=> (u64.const 1158)))
    (case 'inst.i32.gt_u' (=> (u64.const 1159)))
    (case 'inst.i32.le_s' (=> (u64.const 1160)))
    (case 'inst.i32.le_u' (=> (u64.const 1161)))
    (case 'inst.i32.ge_s' (=> (u64.const 1156)))
    (case 'inst.i32.ge_u' (=> (u64.const 1157)))
    (case 'inst.i64.eqz' (=> (u64.const 1199)))
    (case 'inst.i64.eq' (=> (u64.const 1198)))
    (case 'inst.i64.ne' (=> (u64.const 1218)))
    (case 'inst.i64.lt_s' (=> (u64.const 1215)))
    (case 'inst.i64.lt_u' (=> (u64.const 1216)))
    (case 'inst.i64.gt_s' (=> (u64.const 1204)))
    (case 'inst.i64.gt_u' (=> (u64.const 1205)))
    (case 'inst.i64.le_s' (=> (u64.const 1206)))
    (case 'inst.i64.le_u' (=> (u64.const 1207)))
    (case 'inst.i64.ge_s' (=> (u64.const 1202)))
    (case 'inst.i64.ge_u' (=> (u64.const 1203)))
    (case 'inst.f32.eq' (=> (u64.const 1096)))
    (case 'inst.f32.ne' (=> (u64.const 1106)))
    (case 'inst.f32.lt' (=> (u64.const 1102)))
    (case 'inst.f32.gt' (=> (u64.const 1099)))
    (case 'inst.f32.le' (=> (u64.const 1100)))
    (case 'inst.f32.ge' (=> (u64.const 1098)))
    (case 'inst.f64.eq' (=> (u64.const 1124)))
    (case 'inst.f64.ne' (=> (u64.const 1134)))
    (case 'inst.f64.lt' (=> (u64.const 1130)))
    (case 'inst.f64.gt' (=> (u64.const 1127)))
    (case 'inst.f64.le' (=> (u64.const 1128)))
    (case 'inst.f64.ge' (=> (u64.const 1126)))
    (case 'inst.i32.clz' (=> (u64.const 1149)))
    (case 'inst.i32.ctx' (=> (u64.const 1151)))
    (case 'inst.i32.popcnt' (=> (u64.const 1172)))
    (case 'inst.i32.add' (=> (u64.const 1147)))
    (case 'inst.i32.sub' (=> (u64.const 1184)))
    (case 'inst.i32.mul' (=> (u64.const 1169)))
    (case 'inst.i32.div_s' (=> (u64.const 1152)))
    (case 'inst.i32.div_u' (=> (u64.const 1153)))
    (case 'inst.i32.rem_s' (=> (u64.const 1174)))
    (case 'inst.i32.rem_u' (=> (u64.const 1175)))
    (case 'inst.i32.and' (=> (u64.const 1148)))
    (case 'inst.i32.or' (=> (u64.const 1171)))
    (case 'inst.i32.xor' (=> (u64.const 1190)))
    (case 'inst.i32.shl' (=> (u64.const 1178)))
    (case 'inst.i32.shr_s' (=> (u64.const 1179)))
    (case 'inst.i32.shr_u' (=> (u64.const 1180)))
    (case 'inst.i32.rotl' (=> (u64.const 1176)))
    (case 'inst.i32.rotr' (=> (u64.const 1177)))
    (case 'inst.i64.clz' (=> (u64.const 1193)))
    (case 'inst.i64.ctx' (=> (u64.const 1195)))
    (case 'inst.i64.popcnt' (=> (u64.const 1220)))
    (case 'inst.i64.add' (=> (u64.const 1191)))
    (case 'inst.i64.sub' (=> (u64.const 1233)))
    (case 'inst.i64.mul' (=> (u64.const 1217)))
    (case 'inst.i64.div_s' (=> (u64.const 1196)))
    (case 'inst.i64.div_u' (=> (u64.const 1197)))
    (case 'inst.i64.rem_s' (=> (u64.const 1222)))
    (case 'inst.i64.rem_u' (=> (u64.const 1223)))
    (case 'inst.i64.and' (=> (u64.const 1192)))
    (case 'inst.i64.or' (=> (u64.const 1219)))
    (case 'inst.i64.xor' (=> (u64.const 1238)))
    (case 'inst.i64.shl' (=> (u64.const 1230)))
    (case 'inst.i64.shr_s' (=> (u64.const 1231)))
    (case 'inst.i64.shr_u' (=> (u64.const 1232)))
    (case 'inst.i64.rotl' (=> (u64.const 1224)))
    (case 'inst.i64.rotr' (=> (u64.const 1225)))
    (case 'inst.f32.abs' (=> (u64.const 1085)))
    (case 'inst.f32.neg' (=> (u64.const 1108)))
    (case 'inst.f32.ceil' (=> (u64.const 1087)))
    (case 'inst.f32.floor' (=> (u64.const 1097)))
    (case 'inst.f32.trunc' (=> (u64.const 1113)))
    (case 'inst.f32.nearest' (=> (u64.const 1107)))
    (case 'inst.f32.sqrt' (=> (u64.const 1110)))
    (case 'inst.f32.add' (=> (u64.const 1086)))
    (case 'inst.f32.sub' (=> (u64.const 1112)))
    (case 'inst.f32.mul' (=> (u64.const 1105)))
    (case 'inst.f32.div' (=> (u64.const 1095)))
    (case 'inst.f32.min' (=> (u64.const 1104)))
    (case 'inst.f32.max' (=> (u64.const 1103)))
    (case 'inst.f32.copysign' (=> (u64.const 1093)))
    (case 'inst.f64.abs' (=> (u64.const 1114)))
    (case 'inst.f64.neg' (=> (u64.const 1136)))
    (case 'inst.f64.ceil' (=> (u64.const 1116)))
    (case 'inst.f64.floor' (=> (u64.const 1125)))
    (case 'inst.f64.trunc' (=> (u64.const 1142)))
    (case 'inst.f64.nearest' (=> (u64.const 1135)))
    (case 'inst.f64.sqrt' (=> (u64.const 1139)))
    (case 'inst.f64.add' (=> (u64.const 1115)))
    (case 'inst.f64.sub' (=> (u64.const 1141)))
    (case 'inst.f64.mul' (=> (u64.const 1133)))
    (case 'inst.f64.div' (=> (u64.const 1123)))
    (case 'inst.f64.min' (=> (u64.const 1132)))
    (case 'inst.f64.max' (=> (u64.const 1131)))
    (case 'inst.f64.copysign' (=> (u64.const 1122)))
    (case 'inst.i32.wrap/i64' (=> (u64.const 1189)))
    (case 'inst.i32.trunc_s/f32' (=> (u64.const 1185)))
    (case 'inst.i32.trunc_u/f32' (=> (u64.const 1187)))
    (case 'inst.i32.trunc_s/f64' (=> (u64.const 1186)))
    (case 'inst.i32.trunc_u/f64' (=> (u64.const 1188)))
    (case 'inst.i64.extend_s/i32' (=> (u64.const 1200)))
    (case 'inst.i64.extend_u/i32' (=> (u64.const 1201)))
    (case 'inst.i64.trunc_s/f32' (=> (u64.const 1234)))
    (case 'inst.i64.trunc_u/f32' (=> (u64.const 1236)))
    (case 'inst.i64.trunc_s/f64' (=> (u64.const 1235)))
    (case 'inst.i64.trunc_u/f64' (=> (u64.const 1237)))
    (case 'inst.f32.convert_s/i32' (=> (u64.const 1089)))
    (case 'inst.f32.convert_u/i32' (=> (u64.const 1091)))
    (case 'inst.f32.convert_s/i64' (=> (u64.const 1090)))
    (case 'inst.f32.convert_u/i64' (=> (u64.const 1092)))
    (case 'inst.f32.demote/f64' (=> (u64.const 1094)))
    (case 'inst.f64.convert_s/i32' (=> (u64.const 1118)))
    (case 'inst.f64.convert_u/i32' (=> (u64.const 1120)))
    (case 'inst.f64.convert_s/i64' (=> (u64.const 1119)))
    (case 'inst.f64.convert_u/i64' (=> (u64.const 1121)))
    (case 'inst.f64.promote/f32' (=> (u64.const 1137)))
    (case 'inst.i32.reinterpret/f32' (=> (u64.const 1173)))
    (case 'inst.i64.reinterpret/f64' (=> (u64.const 1221)))
    (case 'inst.f32.reinterpret/i32' (=> (u64.const 1109)))
    (case 'inst.f64.reinterpret/i64' (=> (u64.const 1138)))
  )
  (=> (u64.const 1248))
)
(define 'instruction.opcode' (uint8))
(define 'local.entry'
  (=> (u64.const 1250))
  (varuint32)
  (=> (u64.const 1251))
  (eval 'type.value')
  (=> (u64.const 1252))
)
(define 'memory.section'
  (=> (u64.const 1255))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1256))
    )
    (eval 'memory.type')
    (=> (u64.const 1258))
  )
  (=> (u64.const 1257))
)
(define 'memory.immediate'
  (=> (u64.const 1253))
  (varuint32)
  (varuint32)
  (=> (u64.const 1254))
)
(define 'name.section'
  (=> (u64.const 1261))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1262))
    )
    (eval 'function.names')
  )
  (=> (u64.const 1263))
)
(define 'memory.type'
  (=> (u64.const 1259))
  (eval 'resizable.limits')
  (=> (u64.const 1260))
)
(define 'resizable.limits' (locals 1)
  (=> (u64.const 1264))
  (set (local 0) (varuint32))
  (=> (u64.const 1266))
  (varuint32)
  (=> (u64.const 1267))
  (if (bitwise.and (local 0) (u32.const 0x1))
    (seq
      (varuint32)
      (=> (u64.const 1268))
    )
  )
  (=> (u64.const 1265))
)
(define 'section' (locals 1)
  (=> (u64.const 1269))
  (set (local 0) (varuint32))
  (=> (u64.const 1270))
  (block
    (switch (local 0)
      (error)
      (case 'unknown.section' (eval 'unknown.section'))
      (case 'type.section' (eval 'type.section'))
      (case 'import.section' (eval 'import.section'))
      (case 'function.section' (eval 'function.section'))
      (case 'table.section' (eval 'table.section'))
      (case 'memory.section' (eval 'memory.section'))
      (case 'global.section' (eval 'global.section'))
      (case 'export.section' (eval 'export.section'))
      (case 'start.section' (eval 'start.section'))
      (case 'element.section' (eval 'element.section'))
      (case 'code.section' (eval 'code.section'))
      (case 'data.section' (eval 'data.section'))
    )
  )
  (=> (u64.const 1271))
)
(define 'skip.section'
  (=> (u64.const 1272))
  (loop.unbounded (uint8))
  (=> (u64.const 1273))
)
(define 'start.section'
  (=> (u64.const 1274))
  (varuint32)
  (=> (u64.const 1275))
)
(define 'symbol.name'
  (=> (u64.const 1276))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1278))
    )
    (uint8)
  )
  (=> (u64.const 1277))
)
(define 'table.section'
  (=> (u64.const 1279))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1280))
    )
    (eval 'table.type')
    (=> (u64.const 1282))
  )
  (=> (u64.const 1281))
)
(define 'table.type'
  (=> (u64.const 1283))
  (eval 'type.value')
  (eval 'resizable.limits')
  (=> (u64.const 1284))
)
(define 'type.section'
  (=> (u64.const 1289))
  (loop
    (seq
      (varuint32)
      (=> (u64.const 1290))
    )
    (eval 'function.type')
  )
  (=> (u64.const 1291))
)
(define 'type.value'
  (=> (u64.const 1292))
  (varint32)
  (=> (u64.const 1293))
)
(define 'unknown.section'
  (=> (u64.const 1294))
  (eval 'symbol.name')
  (eval 'unknown_body')
  (=> (u64.const 1295))
)
(define 'unknown_body'
  (if (last.symbol.is 'name')
    (eval 'name.section')
    (eval 'skip.section')
  )
)

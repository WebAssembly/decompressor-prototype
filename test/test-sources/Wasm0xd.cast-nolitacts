(header (u32.const 0x6d736163) (u32.const 0x0))
(header.read (u32.const 0x6d736100) (u32.const 0xd))
(declarations)
(define 'br_table' (params)
  (loop (varuint32) (varuint32))
  (varuint32)
)
(define 'br_target' (params) (varuint32))
(define 'code.section' (params)
  (loop (varuint32) (eval 'function.body'))
)
(define 'data.section' (params)
  (loop (varuint32) (eval 'data.segment'))
)
(define 'data.segment' (params)
  (varuint32)
  (eval 'init_expr')
  (loop (varuint32) (uint8))
)
(define 'element.section' (params)
  (loop (varuint32) (eval 'element.segment'))
)
(define 'element.segment' (params)
  (varuint32)
  (eval 'init_expr')
  (loop (varuint32) (varuint32))
)
(define 'export.section' (params)
  (loop (varuint32) (eval 'export.entry'))
)
(define 'export.entry' (params)
  (eval 'symbol.name')
  (eval 'external.kind')
  (varuint32)
)
(define 'external.kind' (params) (uint8))
(define 'file' (params)
  (loop.unbounded (eval 'section'))
)
(define 'function.section' (params)
  (loop (varuint32) (varuint32))
)
(define 'function.names' (params)
  (eval 'symbol.name')
  (loop (varuint32) (eval 'symbol.name'))
)
(define 'function.type' (params)
  (varint32)
  (loop (varuint32) (eval 'type.value'))
  (loop (varuint32) (eval 'type.value'))
)
(define 'function.body' (params)
  (block
    (loop (varuint32) (eval 'local.entry'))
    (loop.unbounded
      (eval 'instruction.opcode')
      (eval 'instruction')
    )
  )
)
(define 'global.section' (params)
  (loop (varuint32)
    (eval 'global.type')
    (eval 'init_expr')
  )
)
(define 'global.type' (params)
  (eval 'type.value')
  (uint8)
)
(define 'import.section' (params)
  (loop (varuint32) (eval 'import.entry'))
)
(define 'import.entry' (params)
  (eval 'symbol.name')
  (eval 'symbol.name')
  (switch (eval 'external.kind')
    (error)
    (case (u8.const 0) (varuint32))
    (case (u8.const 1) (eval 'table.type'))
    (case (u8.const 2) (eval 'memory.type'))
    (case (u8.const 3) (eval 'global.type'))
  )
)
(define 'init_expr' (params)
  (locals 1)
  (set (local 0) (u32.const 1))
  (eval 'instruction.opcode')
  (switch (read)
    (error)
    (case (u8.const 0x41) (varint32))
    (case (u8.const 0x42) (varint64))
    (case (u8.const 0x43) (uint32))
    (case (u8.const 0x44) (uint64))
    (case (u8.const 0x23) (varuint32))
    (case (u8.const 0xb) (set (local 0) (u32.const 0)))
  )
  (if (local 0)
    (switch (eval 'instruction.opcode')
      (error)
      (case (u8.const 0xb) (void))
    )
  )
)
(define 'instruction' (params)
  (switch (read)
    (error)
    (case (u8.const 0x0) (void))
    (case (u8.const 0x1) (void))
    (case (u8.const 0x2) (eval 'type.value'))
    (case (u8.const 0x3) (eval 'type.value'))
    (case (u8.const 0x4) (eval 'type.value'))
    (case (u8.const 0x5) (void))
    (case (u8.const 0xb) (void))
    (case (u8.const 0xc) (eval 'br_target'))
    (case (u8.const 0xd) (eval 'br_target'))
    (case (u8.const 0xe) (eval 'br_table'))
    (case (u8.const 0xf) (void))
    (case (u8.const 0x10) (varuint32))
    (case (u8.const 0x11)
      (varuint32)
      (varuint32)
    )
    (case (u8.const 0x1a) (void))
    (case (u8.const 0x1b) (void))
    (case (u8.const 0x20) (varuint32))
    (case (u8.const 0x21) (varuint32))
    (case (u8.const 0x22) (varuint32))
    (case (u8.const 0x23) (varuint32))
    (case (u8.const 0x24) (varuint32))
    (case (u8.const 0x28) (eval 'memory.immediate'))
    (case (u8.const 0x29) (eval 'memory.immediate'))
    (case (u8.const 0x2a) (eval 'memory.immediate'))
    (case (u8.const 0x2b) (eval 'memory.immediate'))
    (case (u8.const 0x2c) (eval 'memory.immediate'))
    (case (u8.const 0x2d) (eval 'memory.immediate'))
    (case (u8.const 0x2e) (eval 'memory.immediate'))
    (case (u8.const 0x2f) (eval 'memory.immediate'))
    (case (u8.const 0x30) (eval 'memory.immediate'))
    (case (u8.const 0x31) (eval 'memory.immediate'))
    (case (u8.const 0x32) (eval 'memory.immediate'))
    (case (u8.const 0x33) (eval 'memory.immediate'))
    (case (u8.const 0x34) (eval 'memory.immediate'))
    (case (u8.const 0x35) (eval 'memory.immediate'))
    (case (u8.const 0x36) (eval 'memory.immediate'))
    (case (u8.const 0x37) (eval 'memory.immediate'))
    (case (u8.const 0x38) (eval 'memory.immediate'))
    (case (u8.const 0x39) (eval 'memory.immediate'))
    (case (u8.const 0x3a) (eval 'memory.immediate'))
    (case (u8.const 0x3b) (eval 'memory.immediate'))
    (case (u8.const 0x3c) (eval 'memory.immediate'))
    (case (u8.const 0x3d) (eval 'memory.immediate'))
    (case (u8.const 0x3e) (eval 'memory.immediate'))
    (case (u8.const 0x3f) (varuint32))
    (case (u8.const 0x40) (varuint32))
    (case (u8.const 0x41) (varint32))
    (case (u8.const 0x42) (varint64))
    (case (u8.const 0x43) (uint32))
    (case (u8.const 0x44) (uint64))
    (case (u8.const 0x45) (void))
    (case (u8.const 0x46) (void))
    (case (u8.const 0x47) (void))
    (case (u8.const 0x48) (void))
    (case (u8.const 0x49) (void))
    (case (u8.const 0x4a) (void))
    (case (u8.const 0x4b) (void))
    (case (u8.const 0x4c) (void))
    (case (u8.const 0x4d) (void))
    (case (u8.const 0x4e) (void))
    (case (u8.const 0x4f) (void))
    (case (u8.const 0x50) (void))
    (case (u8.const 0x51) (void))
    (case (u8.const 0x52) (void))
    (case (u8.const 0x53) (void))
    (case (u8.const 0x54) (void))
    (case (u8.const 0x55) (void))
    (case (u8.const 0x56) (void))
    (case (u8.const 0x57) (void))
    (case (u8.const 0x58) (void))
    (case (u8.const 0x59) (void))
    (case (u8.const 0x5a) (void))
    (case (u8.const 0x5b) (void))
    (case (u8.const 0x5c) (void))
    (case (u8.const 0x5d) (void))
    (case (u8.const 0x5e) (void))
    (case (u8.const 0x5f) (void))
    (case (u8.const 0x60) (void))
    (case (u8.const 0x61) (void))
    (case (u8.const 0x62) (void))
    (case (u8.const 0x63) (void))
    (case (u8.const 0x64) (void))
    (case (u8.const 0x65) (void))
    (case (u8.const 0x66) (void))
    (case (u8.const 0x67) (void))
    (case (u8.const 0x68) (void))
    (case (u8.const 0x69) (void))
    (case (u8.const 0x6a) (void))
    (case (u8.const 0x6b) (void))
    (case (u8.const 0x6c) (void))
    (case (u8.const 0x6d) (void))
    (case (u8.const 0x6e) (void))
    (case (u8.const 0x6f) (void))
    (case (u8.const 0x70) (void))
    (case (u8.const 0x71) (void))
    (case (u8.const 0x72) (void))
    (case (u8.const 0x73) (void))
    (case (u8.const 0x74) (void))
    (case (u8.const 0x75) (void))
    (case (u8.const 0x76) (void))
    (case (u8.const 0x77) (void))
    (case (u8.const 0x78) (void))
    (case (u8.const 0x79) (void))
    (case (u8.const 0x7a) (void))
    (case (u8.const 0x7b) (void))
    (case (u8.const 0x7c) (void))
    (case (u8.const 0x7d) (void))
    (case (u8.const 0x7e) (void))
    (case (u8.const 0x7f) (void))
    (case (u8.const 0x80) (void))
    (case (u8.const 0x81) (void))
    (case (u8.const 0x82) (void))
    (case (u8.const 0x83) (void))
    (case (u8.const 0x84) (void))
    (case (u8.const 0x85) (void))
    (case (u8.const 0x86) (void))
    (case (u8.const 0x87) (void))
    (case (u8.const 0x88) (void))
    (case (u8.const 0x89) (void))
    (case (u8.const 0x8a) (void))
    (case (u8.const 0x8b) (void))
    (case (u8.const 0x8c) (void))
    (case (u8.const 0x8d) (void))
    (case (u8.const 0x8e) (void))
    (case (u8.const 0x8f) (void))
    (case (u8.const 0x90) (void))
    (case (u8.const 0x91) (void))
    (case (u8.const 0x92) (void))
    (case (u8.const 0x93) (void))
    (case (u8.const 0x94) (void))
    (case (u8.const 0x95) (void))
    (case (u8.const 0x96) (void))
    (case (u8.const 0x97) (void))
    (case (u8.const 0x98) (void))
    (case (u8.const 0x99) (void))
    (case (u8.const 0x9a) (void))
    (case (u8.const 0x9b) (void))
    (case (u8.const 0x9c) (void))
    (case (u8.const 0x9d) (void))
    (case (u8.const 0x9e) (void))
    (case (u8.const 0x9f) (void))
    (case (u8.const 0xa0) (void))
    (case (u8.const 0xa1) (void))
    (case (u8.const 0xa2) (void))
    (case (u8.const 0xa3) (void))
    (case (u8.const 0xa4) (void))
    (case (u8.const 0xa5) (void))
    (case (u8.const 0xa6) (void))
    (case (u8.const 0xa7) (void))
    (case (u8.const 0xa8) (void))
    (case (u8.const 0xa9) (void))
    (case (u8.const 0xaa) (void))
    (case (u8.const 0xab) (void))
    (case (u8.const 0xac) (void))
    (case (u8.const 0xad) (void))
    (case (u8.const 0xae) (void))
    (case (u8.const 0xaf) (void))
    (case (u8.const 0xb0) (void))
    (case (u8.const 0xb1) (void))
    (case (u8.const 0xb2) (void))
    (case (u8.const 0xb3) (void))
    (case (u8.const 0xb4) (void))
    (case (u8.const 0xb5) (void))
    (case (u8.const 0xb6) (void))
    (case (u8.const 0xb7) (void))
    (case (u8.const 0xb8) (void))
    (case (u8.const 0xb9) (void))
    (case (u8.const 0xba) (void))
    (case (u8.const 0xbb) (void))
    (case (u8.const 0xbc) (void))
    (case (u8.const 0xbd) (void))
    (case (u8.const 0xbe) (void))
    (case (u8.const 0xbf) (void))
  )
)
(define 'instruction.opcode' (params) (uint8))
(define 'local.entry' (params)
  (varuint32)
  (eval 'type.value')
)
(define 'memory.section' (params)
  (loop (varuint32) (eval 'memory.type'))
)
(define 'memory.immediate' (params)
  (varuint32)
  (varuint32)
)
(define 'name.section' (params)
  (loop (varuint32) (eval 'function.names'))
)
(define 'memory.type' (params) (eval 'resizable.limits'))
(define 'resizable.limits' (params)
  (locals 1)
  (set (local 0) (varuint32))
  (varuint32)
  (if (bitwise.and (local 0) (u32.const 0x1))
    (varuint32)
  )
)
(define 'section' (params)
  (locals 1)
  (set (local 0) (varuint32))
  (block
    (switch (local 0)
      (error)
      (case (u32.const 0) (eval 'unknown.section'))
      (case (u32.const 1) (eval 'type.section'))
      (case (u32.const 2) (eval 'import.section'))
      (case (u32.const 3) (eval 'function.section'))
      (case (u32.const 4) (eval 'table.section'))
      (case (u32.const 5) (eval 'memory.section'))
      (case (u32.const 6) (eval 'global.section'))
      (case (u32.const 7) (eval 'export.section'))
      (case (u32.const 8) (eval 'start.section'))
      (case (u32.const 9) (eval 'element.section'))
      (case (u32.const 10) (eval 'code.section'))
      (case (u32.const 11) (eval 'data.section'))
    )
  )
)
(define 'skip.section' (params)
  (loop.unbounded (uint8))
)
(define 'start.section' (params) (varuint32))
(define 'symbol.name' (params)
  (loop (varuint32) (uint8))
)
(define 'table.section' (params)
  (loop (varuint32) (eval 'table.type'))
)
(define 'table.type' (params)
  (eval 'type.value')
  (eval 'resizable.limits')
)
(define 'type.section' (params)
  (loop (varuint32) (eval 'function.type'))
)
(define 'type.value' (params) (varint32))
(define 'unknown.section' (params)
  (eval 'symbol.name')
  (eval 'unknown_body')
)
(define 'unknown_body' (params)
  (if (last.symbol.is 'name')
    (eval 'name.section')
    (eval 'skip.section')
  )
)

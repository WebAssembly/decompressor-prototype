(header (u32.const 0x6d736163) (u32.const 0x0))
(header.read (u32.const 0x6d736100) (u32.const 0xd))
(declarations)
(literal.action.enum (u32.const 1001)
  'br_table.begin'
  'br_table.count'
  'br_table.default'
  'br_table.end'
  'br_table.target'
  'br_target.begin'
  'br_target.end'
  'code.section.begin'
  'code.section.count'
  'code.section.end'
  'data.section.begin'
  'data.section.count'
  'data.section.end'
  'data.segment.begin'
  'data.segment.data'
  'data.segment.end'
  'data.segment.memory_index'
  'data.segment.size'
  'element.section.begin'
  'element.section.count'
  'element.section.end'
  'element.segment.begin'
  'element.segment.elem'
  'element.segment.end'
  'element.segment.index'
  'element.segment.num_elem'
  'element.segment.offset'
  'export.entry.index'
  'export.entry.name'
  'export.section.begin'
  'export.section.count'
  'export.section.end'
  'external.kind.begin'
  'external.kind.end'
  'file.begin'
  'file.end'
  'function.body.begin'
  'function.body.code.begin'
  'function.body.code.end'
  'function.body.end'
  'function.body.local_count'
  'function.names.begin'
  'function.names.end'
  'function.names.fcn_name'
  'function.names.local_count'
  'function.names.local_name'
  'function.section.begin'
  'function.section.count'
  'function.section.end'
  'function.section.type'
  'function.type.begin'
  'function.type.end'
  'function.type.form'
  'global.section.begin'
  'global.section.count'
  'global.section.end'
  'global.section.variable.init'
  'global.section.variable.type'
  'global.type.begin'
  'global.type.end'
  'import.entry.begin'
  'import.entry.end'
  'import.entry.field'
  'import.entry.function'
  'import.entry.global'
  'import.entry.memory'
  'import.entry.module'
  'import.entry.table'
  'import.section.begin'
  'import.section.count'
  'import.section.end'
  'init_expr.begin'
  'init_expr.end'
  'init_expr.opcode'
  'inst.block'
  'inst.br'
  'inst.br_if'
  'inst.br_table'
  'inst.call'
  'inst.call_indirect'
  'inst.current_memory'
  'inst.drop'
  'inst.else'
  'inst.end'
  'inst.f32.abs'
  'inst.f32.add'
  'inst.f32.ceil'
  'inst.f32.const'
  'inst.f32.convert_s/i32'
  'inst.f32.convert_s/i64'
  'inst.f32.convert_u/i32'
  'inst.f32.convert_u/i64'
  'inst.f32.copysign'
  'inst.f32.demote/f64'
  'inst.f32.div'
  'inst.f32.eq'
  'inst.f32.floor'
  'inst.f32.ge'
  'inst.f32.gt'
  'inst.f32.le'
  'inst.f32.load'
  'inst.f32.lt'
  'inst.f32.max'
  'inst.f32.min'
  'inst.f32.mul'
  'inst.f32.ne'
  'inst.f32.nearest'
  'inst.f32.neg'
  'inst.f32.reinterpret/i32'
  'inst.f32.sqrt'
  'inst.f32.store'
  'inst.f32.sub'
  'inst.f32.trunc'
  'inst.f64.abs'
  'inst.f64.add'
  'inst.f64.ceil'
  'inst.f64.const'
  'inst.f64.convert_s/i32'
  'inst.f64.convert_s/i64'
  'inst.f64.convert_u/i32'
  'inst.f64.convert_u/i64'
  'inst.f64.copysign'
  'inst.f64.div'
  'inst.f64.eq'
  'inst.f64.floor'
  'inst.f64.ge'
  'inst.f64.gt'
  'inst.f64.le'
  'inst.f64.load'
  'inst.f64.lt'
  'inst.f64.max'
  'inst.f64.min'
  'inst.f64.mul'
  'inst.f64.ne'
  'inst.f64.nearest'
  'inst.f64.neg'
  'inst.f64.promote/f32'
  'inst.f64.reinterpret/i64'
  'inst.f64.sqrt'
  'inst.f64.store'
  'inst.f64.sub'
  'inst.f64.trunc'
  'inst.get_global'
  'inst.get_local'
  'inst.grow_memory'
  'inst.if'
  'inst.i32.add'
  'inst.i32.and'
  'inst.i32.clz'
  'inst.i32.const'
  'inst.i32.ctx'
  'inst.i32.div_s'
  'inst.i32.div_u'
  'inst.i32.eq'
  'inst.i32.eqz'
  'inst.i32.ge_s'
  'inst.i32.ge_u'
  'inst.i32.gt_s'
  'inst.i32.gt_u'
  'inst.i32.le_s'
  'inst.i32.le_u'
  'inst.i32.load'
  'inst.i32.load16_s'
  'inst.i32.load16_u'
  'inst.i32.load8_s'
  'inst.i32.load8_u'
  'inst.i32.lt_s'
  'inst.i32.lt_u'
  'inst.i32.mul'
  'inst.i32.ne'
  'inst.i32.or'
  'inst.i32.popcnt'
  'inst.i32.reinterpret/f32'
  'inst.i32.rem_s'
  'inst.i32.rem_u'
  'inst.i32.rotl'
  'inst.i32.rotr'
  'inst.i32.shl'
  'inst.i32.shr_s'
  'inst.i32.shr_u'
  'inst.i32.store'
  'inst.i32.store16'
  'inst.i32.store8'
  'inst.i32.sub'
  'inst.i32.trunc_s/f32'
  'inst.i32.trunc_s/f64'
  'inst.i32.trunc_u/f32'
  'inst.i32.trunc_u/f64'
  'inst.i32.wrap/i64'
  'inst.i32.xor'
  'inst.i64.add'
  'inst.i64.and'
  'inst.i64.clz'
  'inst.i64.const'
  'inst.i64.ctx'
  'inst.i64.div_s'
  'inst.i64.div_u'
  'inst.i64.eq'
  'inst.i64.eqz'
  'inst.i64.extend_s/i32'
  'inst.i64.extend_u/i32'
  'inst.i64.ge_s'
  'inst.i64.ge_u'
  'inst.i64.gt_s'
  'inst.i64.gt_u'
  'inst.i64.le_s'
  'inst.i64.le_u'
  'inst.i64.load'
  'inst.i64.load16_s'
  'inst.i64.load16_u'
  'inst.i64.load32_s'
  'inst.i64.load32_u'
  'inst.i64.load8_s'
  'inst.i64.load8_u'
  'inst.i64.lt_s'
  'inst.i64.lt_u'
  'inst.i64.mul'
  'inst.i64.ne'
  'inst.i64.or'
  'inst.i64.popcnt'
  'inst.i64.reinterpret/f64'
  'inst.i64.rem_s'
  'inst.i64.rem_u'
  'inst.i64.rotl'
  'inst.i64.rotr'
  'inst.i64.store'
  'inst.i64.store8'
  'inst.i64.store16'
  'inst.i64.store32'
  'inst.i64.shl'
  'inst.i64.shr_s'
  'inst.i64.shr_u'
  'inst.i64.sub'
  'inst.i64.trunc_s/f32'
  'inst.i64.trunc_s/f64'
  'inst.i64.trunc_u/f32'
  'inst.i64.trunc_u/f64'
  'inst.i64.xor'
  'inst.loop'
  'inst.nop'
  'inst.return'
  'inst.select'
  'inst.set_global'
  'inst.set_local'
  'inst.tee_local'
  'inst.unreachable'
  'instruction.begin'
  'instruction.end'
  'instruction.opcode'
  'local.entry.begin'
  'local.entry.count'
  'local.entry.end'
  'memory.immediate.begin'
  'memory.immediate.end'
  'memory.section.begin'
  'memory.section.count'
  'memory.section.end'
  'memory.section.entry'
  'memory.type.begin'
  'memory.type.end'
  'name.section.begin'
  'name.section.count'
  'name.section.end'
  'resizable.limits.begin'
  'resizable.limits.end'
  'resizable.limits.flags'
  'resizable.limits.initial'
  'resizable.limits.maximum'
  'section.begin'
  'section.code'
  'section.end'
  'skip.section.begin'
  'skip.section.end'
  'start.section.begin'
  'start.section.end'
  'symbol.name.begin'
  'symbol.name.end'
  'symbol.name.length'
  'table.section.begin'
  'table.section.count'
  'table.section.end'
  'table.section.type'
  'table.type.begin'
  'table.type.end'
  'type.num.params'
  'type.num.returns'
  'type.param'
  'type.return'
  'type.section.begin'
  'type.section.count'
  'type.section.end'
  'type.value.begin'
  'type.value.end'
  'unknown.section.begin'
  'unknown.section.end'
)
(define 'br_table' (params)
  (=> 'br_table.begin')
  (loop
    (seq
      (varuint32)
      (=> 'br_table.count')
    )
    (varuint32)
    (=> 'br_table.target')
  )
  (varuint32)
  (=> 'br_table.default')
  (=> 'br_table.end')
)
(define 'br_target' (params)
  (=> 'br_target.begin')
  (varuint32)
  (=> 'br_target.end')
)
(define 'code.section' (params)
  (=> 'code.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'code.section.count')
    )
    (eval 'function.body')
  )
  (=> 'code.section.end')
)
(define 'data.section' (params)
  (=> 'data.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'data.section.count')
    )
    (eval 'data.segment')
  )
  (=> 'data.section.end')
)
(define 'data.segment' (params)
  (=> 'data.segment.begin')
  (varuint32)
  (=> 'data.segment.memory_index')
  (eval 'init_expr')
  (loop
    (seq
      (varuint32)
      (=> 'data.segment.size')
    )
    (uint8)
    (=> 'data.segment.data')
  )
  (=> 'data.segment.end')
)
(define 'element.section' (params)
  (=> 'element.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'element.section.count')
    )
    (eval 'element.segment')
  )
  (=> 'element.section.end')
)
(define 'element.segment' (params)
  (=> 'element.segment.begin')
  (varuint32)
  (=> 'element.segment.index')
  (eval 'init_expr')
  (=> 'element.segment.offset')
  (loop
    (seq
      (varuint32)
      (=> 'element.segment.num_elem')
    )
    (varuint32)
    (=> 'element.segment.elem')
  )
  (=> 'element.segment.end')
)
(define 'export.section' (params)
  (=> 'export.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'export.section.count')
    )
    (eval 'export.entry')
  )
  (=> 'export.section.end')
)
(define 'export.entry' (params)
  (eval 'symbol.name')
  (=> 'export.entry.name')
  (eval 'external.kind')
  (varuint32)
  (=> 'export.entry.index')
)
(define 'external.kind' (params)
  (=> 'external.kind.begin')
  (uint8)
  (=> 'external.kind.end')
)
(define 'file' (params)
  (=> 'file.begin')
  (loop.unbounded (eval 'section'))
  (=> 'file.end')
)
(define 'function.section' (params)
  (=> 'function.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'function.section.count')
    )
    (varuint32)
    (=> 'function.section.type')
  )
  (=> 'function.section.end')
)
(define 'function.names' (params)
  (=> 'function.names.begin')
  (eval 'symbol.name')
  (=> 'function.names.fcn_name')
  (loop
    (seq
      (varuint32)
      (=> 'function.names.local_count')
    )
    (eval 'symbol.name')
    (=> 'function.names.local_name')
  )
  (=> 'function.names.end')
)
(define 'function.type' (params)
  (=> 'function.type.begin')
  (varint32)
  (=> 'function.type.form')
  (loop
    (seq
      (varuint32)
      (=> 'type.num.params')
    )
    (eval 'type.value')
    (=> 'type.param')
  )
  (loop
    (seq
      (varuint32)
      (=> 'type.num.returns')
    )
    (eval 'type.value')
    (=> 'type.return')
  )
  (=> 'function.type.end')
)
(define 'function.body' (params)
  (=> 'function.body.begin')
  (block
    (loop
      (seq
        (varuint32)
        (=> 'function.body.local_count')
      )
      (eval 'local.entry')
    )
    (=> 'function.body.code.begin')
    (loop.unbounded
      (eval 'instruction.opcode')
      (eval 'instruction')
    )
    (=> 'function.body.code.end')
  )
  (=> 'function.body.end')
)
(define 'global.section' (params)
  (=> 'global.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'global.section.count')
    )
    (eval 'global.type')
    (=> 'global.section.variable.type')
    (eval 'init_expr')
    (=> 'global.section.variable.init')
  )
  (=> 'global.section.end')
)
(define 'global.type' (params)
  (=> 'global.type.begin')
  (eval 'type.value')
  (uint8)
  (=> 'global.type.end')
)
(define 'import.section' (params)
  (=> 'import.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'import.section.count')
    )
    (eval 'import.entry')
  )
  (=> 'import.section.end')
)
(define 'import.entry' (params)
  (=> 'import.entry.begin')
  (eval 'symbol.name')
  (=> 'import.entry.module')
  (eval 'symbol.name')
  (=> 'import.entry.field')
  (switch (eval 'external.kind')
    (error)
    (case (u8.const 0)
      (varuint32)
      (=> 'import.entry.function')
    )
    (case (u8.const 1)
      (eval 'table.type')
      (=> 'import.entry.table')
    )
    (case (u8.const 2)
      (eval 'memory.type')
      (=> 'import.entry.memory')
    )
    (case (u8.const 3)
      (eval 'global.type')
      (=> 'import.entry.global')
    )
  )
  (=> 'import.entry.end')
)
(define 'init_expr' (params)
  (locals 1)
  (=> 'init_expr.begin')
  (set (local 0) (u32.const 1))
  (eval 'instruction.opcode')
  (switch
    (seq
      (read)
      (=> 'init_expr.opcode')
    )
    (error)
    (case (u8.const 0x41)
      (varint32)
      (=> 'inst.i32.const')
    )
    (case (u8.const 0x42)
      (varint64)
      (=> 'inst.i64.const')
    )
    (case (u8.const 0x43)
      (uint32)
      (=> 'inst.f32.const')
    )
    (case (u8.const 0x44)
      (uint64)
      (=> 'inst.f64.const')
    )
    (case (u8.const 0x23)
      (varuint32)
      (=> 'inst.get_global')
    )
    (case (u8.const 0xb)
      (=> 'inst.end')
      (set (local 0) (u32.const 0))
    )
  )
  (if (local 0)
    (switch (eval 'instruction.opcode')
      (error)
      (case (u8.const 0xb) (=> 'inst.end'))
    )
  )
  (=> 'init_expr.end')
)
(define 'instruction' (params)
  (=> 'instruction.begin')
  (switch
    (seq
      (read)
      (=> 'instruction.opcode')
    )
    (error)
    (case (u8.const 0x0) (=> 'inst.unreachable'))
    (case (u8.const 0x1) (=> 'inst.nop'))
    (case (u8.const 0x2)
      (eval 'type.value')
      (=> 'inst.block')
    )
    (case (u8.const 0x3)
      (eval 'type.value')
      (=> 'inst.loop')
    )
    (case (u8.const 0x4)
      (eval 'type.value')
      (=> 'inst.if')
    )
    (case (u8.const 0x5) (=> 'inst.else'))
    (case (u8.const 0xb) (=> 'inst.end'))
    (case (u8.const 0xc)
      (eval 'br_target')
      (=> 'inst.br')
    )
    (case (u8.const 0xd)
      (eval 'br_target')
      (=> 'inst.br_if')
    )
    (case (u8.const 0xe)
      (eval 'br_table')
      (=> 'inst.br_table')
    )
    (case (u8.const 0xf) (=> 'inst.return'))
    (case (u8.const 0x10)
      (varuint32)
      (=> 'inst.call')
    )
    (case (u8.const 0x11)
      (varuint32)
      (varuint32)
      (=> 'inst.call_indirect')
    )
    (case (u8.const 0x1a) (=> 'inst.drop'))
    (case (u8.const 0x1b) (=> 'inst.select'))
    (case (u8.const 0x20)
      (varuint32)
      (=> 'inst.get_local')
    )
    (case (u8.const 0x21)
      (varuint32)
      (=> 'inst.set_local')
    )
    (case (u8.const 0x22)
      (varuint32)
      (=> 'inst.tee_local')
    )
    (case (u8.const 0x23)
      (varuint32)
      (=> 'inst.get_global')
    )
    (case (u8.const 0x24)
      (varuint32)
      (=> 'inst.set_global')
    )
    (case (u8.const 0x28)
      (eval 'memory.immediate')
      (=> 'inst.i32.load')
    )
    (case (u8.const 0x29)
      (eval 'memory.immediate')
      (=> 'inst.i64.load')
    )
    (case (u8.const 0x2a)
      (eval 'memory.immediate')
      (=> 'inst.f32.load')
    )
    (case (u8.const 0x2b)
      (eval 'memory.immediate')
      (=> 'inst.f64.load')
    )
    (case (u8.const 0x2c)
      (eval 'memory.immediate')
      (=> 'inst.i32.load8_s')
    )
    (case (u8.const 0x2d)
      (eval 'memory.immediate')
      (=> 'inst.i32.load8_u')
    )
    (case (u8.const 0x2e)
      (eval 'memory.immediate')
      (=> 'inst.i32.load16_s')
    )
    (case (u8.const 0x2f)
      (eval 'memory.immediate')
      (=> 'inst.i32.load16_u')
    )
    (case (u8.const 0x30)
      (eval 'memory.immediate')
      (=> 'inst.i64.load8_s')
    )
    (case (u8.const 0x31)
      (eval 'memory.immediate')
      (=> 'inst.i64.load8_u')
    )
    (case (u8.const 0x32)
      (eval 'memory.immediate')
      (=> 'inst.i64.load16_s')
    )
    (case (u8.const 0x33)
      (eval 'memory.immediate')
      (=> 'inst.i64.load16_u')
    )
    (case (u8.const 0x34)
      (eval 'memory.immediate')
      (=> 'inst.i64.load32_s')
    )
    (case (u8.const 0x35)
      (eval 'memory.immediate')
      (=> 'inst.i64.load32_u')
    )
    (case (u8.const 0x36)
      (eval 'memory.immediate')
      (=> 'inst.i32.store')
    )
    (case (u8.const 0x37)
      (eval 'memory.immediate')
      (=> 'inst.i64.store')
    )
    (case (u8.const 0x38)
      (eval 'memory.immediate')
      (=> 'inst.f32.store')
    )
    (case (u8.const 0x39)
      (eval 'memory.immediate')
      (=> 'inst.f64.store')
    )
    (case (u8.const 0x3a)
      (eval 'memory.immediate')
      (=> 'inst.i32.store8')
    )
    (case (u8.const 0x3b)
      (eval 'memory.immediate')
      (=> 'inst.i32.store16')
    )
    (case (u8.const 0x3c)
      (eval 'memory.immediate')
      (=> 'inst.i64.store8')
    )
    (case (u8.const 0x3d)
      (eval 'memory.immediate')
      (=> 'inst.i64.store16')
    )
    (case (u8.const 0x3e)
      (eval 'memory.immediate')
      (=> 'inst.i64.store32')
    )
    (case (u8.const 0x3f)
      (varuint32)
      (=> 'inst.current_memory')
    )
    (case (u8.const 0x40)
      (varuint32)
      (=> 'inst.grow_memory')
    )
    (case (u8.const 0x41)
      (varint32)
      (=> 'inst.i32.const')
    )
    (case (u8.const 0x42)
      (varint64)
      (=> 'inst.i64.const')
    )
    (case (u8.const 0x43)
      (uint32)
      (=> 'inst.f32.const')
    )
    (case (u8.const 0x44)
      (uint64)
      (=> 'inst.f64.const')
    )
    (case (u8.const 0x45) (=> 'inst.i32.eqz'))
    (case (u8.const 0x46) (=> 'inst.i32.eq'))
    (case (u8.const 0x47) (=> 'inst.i32.ne'))
    (case (u8.const 0x48) (=> 'inst.i32.lt_s'))
    (case (u8.const 0x49) (=> 'inst.i32.lt_u'))
    (case (u8.const 0x4a) (=> 'inst.i32.gt_s'))
    (case (u8.const 0x4b) (=> 'inst.i32.gt_u'))
    (case (u8.const 0x4c) (=> 'inst.i32.le_s'))
    (case (u8.const 0x4d) (=> 'inst.i32.le_u'))
    (case (u8.const 0x4e) (=> 'inst.i32.ge_s'))
    (case (u8.const 0x4f) (=> 'inst.i32.ge_u'))
    (case (u8.const 0x50) (=> 'inst.i64.eqz'))
    (case (u8.const 0x51) (=> 'inst.i64.eq'))
    (case (u8.const 0x52) (=> 'inst.i64.ne'))
    (case (u8.const 0x53) (=> 'inst.i64.lt_s'))
    (case (u8.const 0x54) (=> 'inst.i64.lt_u'))
    (case (u8.const 0x55) (=> 'inst.i64.gt_s'))
    (case (u8.const 0x56) (=> 'inst.i64.gt_u'))
    (case (u8.const 0x57) (=> 'inst.i64.le_s'))
    (case (u8.const 0x58) (=> 'inst.i64.le_u'))
    (case (u8.const 0x59) (=> 'inst.i64.ge_s'))
    (case (u8.const 0x5a) (=> 'inst.i64.ge_u'))
    (case (u8.const 0x5b) (=> 'inst.f32.eq'))
    (case (u8.const 0x5c) (=> 'inst.f32.ne'))
    (case (u8.const 0x5d) (=> 'inst.f32.lt'))
    (case (u8.const 0x5e) (=> 'inst.f32.gt'))
    (case (u8.const 0x5f) (=> 'inst.f32.le'))
    (case (u8.const 0x60) (=> 'inst.f32.ge'))
    (case (u8.const 0x61) (=> 'inst.f64.eq'))
    (case (u8.const 0x62) (=> 'inst.f64.ne'))
    (case (u8.const 0x63) (=> 'inst.f64.lt'))
    (case (u8.const 0x64) (=> 'inst.f64.gt'))
    (case (u8.const 0x65) (=> 'inst.f64.le'))
    (case (u8.const 0x66) (=> 'inst.f64.ge'))
    (case (u8.const 0x67) (=> 'inst.i32.clz'))
    (case (u8.const 0x68) (=> 'inst.i32.ctx'))
    (case (u8.const 0x69) (=> 'inst.i32.popcnt'))
    (case (u8.const 0x6a) (=> 'inst.i32.add'))
    (case (u8.const 0x6b) (=> 'inst.i32.sub'))
    (case (u8.const 0x6c) (=> 'inst.i32.mul'))
    (case (u8.const 0x6d) (=> 'inst.i32.div_s'))
    (case (u8.const 0x6e) (=> 'inst.i32.div_u'))
    (case (u8.const 0x6f) (=> 'inst.i32.rem_s'))
    (case (u8.const 0x70) (=> 'inst.i32.rem_u'))
    (case (u8.const 0x71) (=> 'inst.i32.and'))
    (case (u8.const 0x72) (=> 'inst.i32.or'))
    (case (u8.const 0x73) (=> 'inst.i32.xor'))
    (case (u8.const 0x74) (=> 'inst.i32.shl'))
    (case (u8.const 0x75) (=> 'inst.i32.shr_s'))
    (case (u8.const 0x76) (=> 'inst.i32.shr_u'))
    (case (u8.const 0x77) (=> 'inst.i32.rotl'))
    (case (u8.const 0x78) (=> 'inst.i32.rotr'))
    (case (u8.const 0x79) (=> 'inst.i64.clz'))
    (case (u8.const 0x7a) (=> 'inst.i64.ctx'))
    (case (u8.const 0x7b) (=> 'inst.i64.popcnt'))
    (case (u8.const 0x7c) (=> 'inst.i64.add'))
    (case (u8.const 0x7d) (=> 'inst.i64.sub'))
    (case (u8.const 0x7e) (=> 'inst.i64.mul'))
    (case (u8.const 0x7f) (=> 'inst.i64.div_s'))
    (case (u8.const 0x80) (=> 'inst.i64.div_u'))
    (case (u8.const 0x81) (=> 'inst.i64.rem_s'))
    (case (u8.const 0x82) (=> 'inst.i64.rem_u'))
    (case (u8.const 0x83) (=> 'inst.i64.and'))
    (case (u8.const 0x84) (=> 'inst.i64.or'))
    (case (u8.const 0x85) (=> 'inst.i64.xor'))
    (case (u8.const 0x86) (=> 'inst.i64.shl'))
    (case (u8.const 0x87) (=> 'inst.i64.shr_s'))
    (case (u8.const 0x88) (=> 'inst.i64.shr_u'))
    (case (u8.const 0x89) (=> 'inst.i64.rotl'))
    (case (u8.const 0x8a) (=> 'inst.i64.rotr'))
    (case (u8.const 0x8b) (=> 'inst.f32.abs'))
    (case (u8.const 0x8c) (=> 'inst.f32.neg'))
    (case (u8.const 0x8d) (=> 'inst.f32.ceil'))
    (case (u8.const 0x8e) (=> 'inst.f32.floor'))
    (case (u8.const 0x8f) (=> 'inst.f32.trunc'))
    (case (u8.const 0x90) (=> 'inst.f32.nearest'))
    (case (u8.const 0x91) (=> 'inst.f32.sqrt'))
    (case (u8.const 0x92) (=> 'inst.f32.add'))
    (case (u8.const 0x93) (=> 'inst.f32.sub'))
    (case (u8.const 0x94) (=> 'inst.f32.mul'))
    (case (u8.const 0x95) (=> 'inst.f32.div'))
    (case (u8.const 0x96) (=> 'inst.f32.min'))
    (case (u8.const 0x97) (=> 'inst.f32.max'))
    (case (u8.const 0x98) (=> 'inst.f32.copysign'))
    (case (u8.const 0x99) (=> 'inst.f64.abs'))
    (case (u8.const 0x9a) (=> 'inst.f64.neg'))
    (case (u8.const 0x9b) (=> 'inst.f64.ceil'))
    (case (u8.const 0x9c) (=> 'inst.f64.floor'))
    (case (u8.const 0x9d) (=> 'inst.f64.trunc'))
    (case (u8.const 0x9e) (=> 'inst.f64.nearest'))
    (case (u8.const 0x9f) (=> 'inst.f64.sqrt'))
    (case (u8.const 0xa0) (=> 'inst.f64.add'))
    (case (u8.const 0xa1) (=> 'inst.f64.sub'))
    (case (u8.const 0xa2) (=> 'inst.f64.mul'))
    (case (u8.const 0xa3) (=> 'inst.f64.div'))
    (case (u8.const 0xa4) (=> 'inst.f64.min'))
    (case (u8.const 0xa5) (=> 'inst.f64.max'))
    (case (u8.const 0xa6) (=> 'inst.f64.copysign'))
    (case (u8.const 0xa7) (=> 'inst.i32.wrap/i64'))
    (case (u8.const 0xa8) (=> 'inst.i32.trunc_s/f32'))
    (case (u8.const 0xa9) (=> 'inst.i32.trunc_u/f32'))
    (case (u8.const 0xaa) (=> 'inst.i32.trunc_s/f64'))
    (case (u8.const 0xab) (=> 'inst.i32.trunc_u/f64'))
    (case (u8.const 0xac) (=> 'inst.i64.extend_s/i32'))
    (case (u8.const 0xad) (=> 'inst.i64.extend_u/i32'))
    (case (u8.const 0xae) (=> 'inst.i64.trunc_s/f32'))
    (case (u8.const 0xaf) (=> 'inst.i64.trunc_u/f32'))
    (case (u8.const 0xb0) (=> 'inst.i64.trunc_s/f64'))
    (case (u8.const 0xb1) (=> 'inst.i64.trunc_u/f64'))
    (case (u8.const 0xb2) (=> 'inst.f32.convert_s/i32'))
    (case (u8.const 0xb3) (=> 'inst.f32.convert_u/i32'))
    (case (u8.const 0xb4) (=> 'inst.f32.convert_s/i64'))
    (case (u8.const 0xb5) (=> 'inst.f32.convert_u/i64'))
    (case (u8.const 0xb6) (=> 'inst.f32.demote/f64'))
    (case (u8.const 0xb7) (=> 'inst.f64.convert_s/i32'))
    (case (u8.const 0xb8) (=> 'inst.f64.convert_u/i32'))
    (case (u8.const 0xb9) (=> 'inst.f64.convert_s/i64'))
    (case (u8.const 0xba) (=> 'inst.f64.convert_u/i64'))
    (case (u8.const 0xbb) (=> 'inst.f64.promote/f32'))
    (case (u8.const 0xbc) (=> 'inst.i32.reinterpret/f32'))
    (case (u8.const 0xbd) (=> 'inst.i64.reinterpret/f64'))
    (case (u8.const 0xbe) (=> 'inst.f32.reinterpret/i32'))
    (case (u8.const 0xbf) (=> 'inst.f64.reinterpret/i64'))
  )
  (=> 'instruction.end')
)
(define 'instruction.opcode' (params) (uint8))
(define 'local.entry' (params)
  (=> 'local.entry.begin')
  (varuint32)
  (=> 'local.entry.count')
  (eval 'type.value')
  (=> 'local.entry.end')
)
(define 'memory.section' (params)
  (=> 'memory.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'memory.section.count')
    )
    (eval 'memory.type')
    (=> 'memory.section.entry')
  )
  (=> 'memory.section.end')
)
(define 'memory.immediate' (params)
  (=> 'memory.immediate.begin')
  (varuint32)
  (varuint32)
  (=> 'memory.immediate.end')
)
(define 'name.section' (params)
  (=> 'name.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'name.section.count')
    )
    (eval 'function.names')
  )
  (=> 'name.section.end')
)
(define 'memory.type' (params)
  (=> 'memory.type.begin')
  (eval 'resizable.limits')
  (=> 'memory.type.end')
)
(define 'resizable.limits' (params)
  (locals 1)
  (=> 'resizable.limits.begin')
  (set (local 0) (varuint32))
  (=> 'resizable.limits.flags')
  (varuint32)
  (=> 'resizable.limits.initial')
  (if (bitwise.and (local 0) (u32.const 0x1))
    (seq
      (varuint32)
      (=> 'resizable.limits.maximum')
    )
  )
  (=> 'resizable.limits.end')
)
(define 'section' (params)
  (locals 1)
  (=> 'section.begin')
  (set (local 0) (varuint32))
  (=> 'section.code')
  (block
    (switch (local 0)
      (error)
      (case (u32.const 0) (eval 'unknown.section'))
      (case (u32.const 1) (eval 'type.section'))
      (case (u32.const 2) (eval 'import.section'))
      (case (u32.const 3) (eval 'function.section'))
      (case (u32.const 4) (eval 'table.section'))
      (case (u32.const 5) (eval 'memory.section'))
      (case (u32.const 6) (eval 'global.section'))
      (case (u32.const 7) (eval 'export.section'))
      (case (u32.const 8) (eval 'start.section'))
      (case (u32.const 9) (eval 'element.section'))
      (case (u32.const 10) (eval 'code.section'))
      (case (u32.const 11) (eval 'data.section'))
    )
  )
  (=> 'section.end')
)
(define 'skip.section' (params)
  (=> 'skip.section.begin')
  (loop.unbounded (uint8))
  (=> 'skip.section.end')
)
(define 'start.section' (params)
  (=> 'start.section.begin')
  (varuint32)
  (=> 'start.section.end')
)
(define 'symbol.name' (params)
  (=> 'symbol.name.begin')
  (loop
    (seq
      (varuint32)
      (=> 'symbol.name.length')
    )
    (uint8)
  )
  (=> 'symbol.name.end')
)
(define 'table.section' (params)
  (=> 'table.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'table.section.count')
    )
    (eval 'table.type')
    (=> 'table.section.type')
  )
  (=> 'table.section.end')
)
(define 'table.type' (params)
  (=> 'table.type.begin')
  (eval 'type.value')
  (eval 'resizable.limits')
  (=> 'table.type.end')
)
(define 'type.section' (params)
  (=> 'type.section.begin')
  (loop
    (seq
      (varuint32)
      (=> 'type.section.count')
    )
    (eval 'function.type')
  )
  (=> 'type.section.end')
)
(define 'type.value' (params)
  (=> 'type.value.begin')
  (varint32)
  (=> 'type.value.end')
)
(define 'unknown.section' (params)
  (=> 'unknown.section.begin')
  (eval 'symbol.name')
  (eval 'unknown_body')
  (=> 'unknown.section.end')
)
(define 'unknown_body' (params)
  (if (last.symbol.is 'name')
    (eval 'name.section')
    (eval 'skip.section')
  )
)
